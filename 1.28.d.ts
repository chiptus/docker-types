/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/containers/json": {
    get: operations["ContainerList"];
  };
  "/containers/create": {
    post: operations["ContainerCreate"];
  };
  "/containers/{id}/json": {
    /** Return low-level information about a container. */
    get: operations["ContainerInspect"];
  };
  "/containers/{id}/top": {
    /** On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. */
    get: operations["ContainerTop"];
  };
  "/containers/{id}/logs": {
    /**
     * Get `stdout` and `stderr` logs from a container.
     *
     * Note: This endpoint works only for containers with the `json-file` or `journald` logging driver.
     */
    get: operations["ContainerLogs"];
  };
  "/containers/{id}/changes": {
    /**
     * Returns which files in a container's filesystem have been added, deleted,
     * or modified. The `Kind` of modification can be one of:
     *
     * - `0`: Modified
     * - `1`: Added
     * - `2`: Deleted
     */
    get: operations["ContainerChanges"];
  };
  "/containers/{id}/export": {
    /** Export the contents of a container as a tarball. */
    get: operations["ContainerExport"];
  };
  "/containers/{id}/stats": {
    /**
     * This endpoint returns a live stream of a container’s resource usage
     * statistics.
     *
     * The `precpu_stats` is the CPU statistic of last read, which is used
     * for calculating the CPU usage percentage. It is not the same as the
     * `cpu_stats` field.
     *
     * If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is
     * nil then for compatibility with older daemons the length of the
     * corresponding `cpu_usage.percpu_usage` array should be used.
     */
    get: operations["ContainerStats"];
  };
  "/containers/{id}/resize": {
    /** Resize the TTY for a container. You must restart the container for the resize to take effect. */
    post: operations["ContainerResize"];
  };
  "/containers/{id}/start": {
    post: operations["ContainerStart"];
  };
  "/containers/{id}/stop": {
    post: operations["ContainerStop"];
  };
  "/containers/{id}/restart": {
    post: operations["ContainerRestart"];
  };
  "/containers/{id}/kill": {
    /** Send a POSIX signal to a container, defaulting to killing to the container. */
    post: operations["ContainerKill"];
  };
  "/containers/{id}/update": {
    /** Change various configuration options of a container without having to recreate it. */
    post: operations["ContainerUpdate"];
  };
  "/containers/{id}/rename": {
    post: operations["ContainerRename"];
  };
  "/containers/{id}/pause": {
    /**
     * Use the cgroups freezer to suspend all processes in a container.
     *
     * Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the cgroups freezer the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed.
     */
    post: operations["ContainerPause"];
  };
  "/containers/{id}/unpause": {
    /** Resume a container which has been paused. */
    post: operations["ContainerUnpause"];
  };
  "/containers/{id}/attach": {
    /**
     * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.
     *
     * Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.
     *
     * See [the documentation for the `docker attach` command](/engine/reference/commandline/attach/) for more details.
     *
     * ### Hijacking
     *
     * This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.
     *
     * This is the response from the daemon for an attach request:
     *
     * ```
     * HTTP/1.1 200 OK
     * Content-Type: application/vnd.docker.raw-stream
     *
     * [STREAM]
     * ```
     *
     * After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.
     *
     * To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.
     *
     * For example, the client sends this request to upgrade the connection:
     *
     * ```
     * POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
     * Upgrade: tcp
     * Connection: Upgrade
     * ```
     *
     * The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:
     *
     * ```
     * HTTP/1.1 101 UPGRADED
     * Content-Type: application/vnd.docker.raw-stream
     * Connection: Upgrade
     * Upgrade: tcp
     *
     * [STREAM]
     * ```
     *
     * ### Stream format
     *
     * When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.
     *
     * The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).
     *
     * It is encoded on the first eight bytes like this:
     *
     * ```go
     * header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
     * ```
     *
     * `STREAM_TYPE` can be:
     *
     * - 0: `stdin` (is written on `stdout`)
     * - 1: `stdout`
     * - 2: `stderr`
     *
     * `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.
     *
     * Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.
     *
     * The simplest way to implement this protocol is the following:
     *
     * 1. Read 8 bytes.
     * 2. Choose `stdout` or `stderr` depending on the first byte.
     * 3. Extract the frame size from the last four bytes.
     * 4. Read the extracted size and output it on the correct output.
     * 5. Goto 1.
     *
     * ### Stream format when using a TTY
     *
     * When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client's `stdin`.
     */
    post: operations["ContainerAttach"];
  };
  "/containers/{id}/attach/ws": {
    get: operations["ContainerAttachWebsocket"];
  };
  "/containers/{id}/wait": {
    /** Block until a container stops, then returns the exit code. */
    post: operations["ContainerWait"];
  };
  "/containers/{id}": {
    delete: operations["ContainerDelete"];
  };
  "/containers/{id}/archive": {
    /** Get a tar archive of a resource in the filesystem of container id. */
    get: operations["ContainerArchive"];
    /**
     * Upload a tar archive to be extracted to a path in the filesystem of container id.
     * `path` parameter is asserted to be a directory. If it exists as a file, 400 error
     * will be returned with message "not a directory".
     */
    put: operations["PutContainerArchive"];
    /** A response header `X-Docker-Container-Path-Stat` is return containing a base64 - encoded JSON object with some filesystem header information about the path. */
    head: operations["ContainerArchiveInfo"];
  };
  "/containers/prune": {
    post: operations["ContainerPrune"];
  };
  "/images/json": {
    /** Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image. */
    get: operations["ImageList"];
  };
  "/build": {
    /**
     * Build an image from a tar archive with a `Dockerfile` in it.
     *
     * The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](/engine/reference/builder/).
     *
     * The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.
     *
     * The build is canceled if the client drops the connection by quitting or being killed.
     */
    post: operations["ImageBuild"];
  };
  "/images/create": {
    /** Create an image by either pulling it from a registry or importing it. */
    post: operations["ImageCreate"];
  };
  "/images/{name}/json": {
    /** Return low-level information about an image. */
    get: operations["ImageInspect"];
  };
  "/images/{name}/history": {
    /** Return parent layers of an image. */
    get: operations["ImageHistory"];
  };
  "/images/{name}/push": {
    /**
     * Push an image to a registry.
     *
     * If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.
     *
     * The push is cancelled if the HTTP connection is closed.
     */
    post: operations["ImagePush"];
  };
  "/images/{name}/tag": {
    /** Tag an image so that it becomes part of a repository. */
    post: operations["ImageTag"];
  };
  "/images/{name}": {
    /**
     * Remove an image, along with any untagged parent images that were
     * referenced by that image.
     *
     * Images can't be removed if they have descendant images, are being
     * used by a running container or are being used by a build.
     */
    delete: operations["ImageDelete"];
  };
  "/images/search": {
    /** Search for an image on Docker Hub. */
    get: operations["ImageSearch"];
  };
  "/images/prune": {
    post: operations["ImagePrune"];
  };
  "/auth": {
    /** Validate credentials for a registry and, if available, get an identity token for accessing the registry without password. */
    post: operations["SystemAuth"];
  };
  "/info": {
    get: operations["SystemInfo"];
  };
  "/version": {
    /** Returns the version of Docker that is running and various information about the system that Docker is running on. */
    get: operations["SystemVersion"];
  };
  "/_ping": {
    /** This is a dummy endpoint you can use to test if the server is accessible. */
    get: operations["SystemPing"];
  };
  "/commit": {
    post: operations["ImageCommit"];
  };
  "/events": {
    /**
     * Stream real-time events from the server.
     *
     * Various objects within Docker report events when something happens to them.
     *
     * Containers report these events: `attach, commit, copy, create, destroy, detach, die, exec_create, exec_detach, exec_start, export, health_status, kill, oom, pause, rename, resize, restart, start, stop, top, unpause, update`
     *
     * Images report these events: `delete, import, load, pull, push, save, tag, untag`
     *
     * Volumes report these events: `create, mount, unmount, destroy`
     *
     * Networks report these events: `create, connect, disconnect, destroy`
     *
     * The Docker daemon reports these events: `reload`
     */
    get: operations["SystemEvents"];
  };
  "/system/df": {
    get: operations["SystemDataUsage"];
  };
  "/images/{name}/get": {
    /**
     * Get a tarball containing all images and metadata for a repository.
     *
     * If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.
     *
     * ### Image tarball format
     *
     * An image tarball contains one directory per image layer (named using its long ID), each containing these files:
     *
     * - `VERSION`: currently `1.0` - the file format version
     * - `json`: detailed layer information, similar to `docker inspect layer_id`
     * - `layer.tar`: A tarfile containing the filesystem changes in this layer
     *
     * The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.
     *
     * If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.
     *
     * ```json
     * {
     *   "hello-world": {
     *     "latest": "565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1"
     *   }
     * }
     * ```
     */
    get: operations["ImageGet"];
  };
  "/images/get": {
    /**
     * Get a tarball containing all images and metadata for several image repositories.
     *
     * For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.
     *
     * For details on the format, see [the export image endpoint](#operation/ImageGet).
     */
    get: operations["ImageGetAll"];
  };
  "/images/load": {
    /**
     * Load a set of images and tags into a repository.
     *
     * For details on the format, see [the export image endpoint](#operation/ImageGet).
     */
    post: operations["ImageLoad"];
  };
  "/containers/{id}/exec": {
    /** Run a command inside a running container. */
    post: operations["ContainerExec"];
  };
  "/exec/{id}/start": {
    /** Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. */
    post: operations["ExecStart"];
  };
  "/exec/{id}/resize": {
    /** Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance. */
    post: operations["ExecResize"];
  };
  "/exec/{id}/json": {
    /** Return low-level information about an exec instance. */
    get: operations["ExecInspect"];
  };
  "/volumes": {
    get: operations["VolumeList"];
  };
  "/volumes/create": {
    post: operations["VolumeCreate"];
  };
  "/volumes/{name}": {
    get: operations["VolumeInspect"];
    /** Instruct the driver to remove the volume. */
    delete: operations["VolumeDelete"];
  };
  "/volumes/prune": {
    post: operations["VolumePrune"];
  };
  "/networks": {
    get: operations["NetworkList"];
  };
  "/networks/{id}": {
    get: operations["NetworkInspect"];
    delete: operations["NetworkDelete"];
  };
  "/networks/create": {
    post: operations["NetworkCreate"];
  };
  "/networks/{id}/connect": {
    post: operations["NetworkConnect"];
  };
  "/networks/{id}/disconnect": {
    post: operations["NetworkDisconnect"];
  };
  "/networks/prune": {
    post: operations["NetworkPrune"];
  };
  "/plugins": {
    /** Returns information about installed plugins. */
    get: operations["PluginList"];
  };
  "/plugins/privileges": {
    get: operations["GetPluginPrivileges"];
  };
  "/plugins/pull": {
    /** Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable). */
    post: operations["PluginPull"];
  };
  "/plugins/{name}/json": {
    get: operations["PluginInspect"];
  };
  "/plugins/{name}": {
    delete: operations["PluginDelete"];
  };
  "/plugins/{name}/enable": {
    post: operations["PluginEnable"];
  };
  "/plugins/{name}/disable": {
    post: operations["PluginDisable"];
  };
  "/plugins/{name}/upgrade": {
    post: operations["PluginUpgrade"];
  };
  "/plugins/create": {
    post: operations["PluginCreate"];
  };
  "/plugins/{name}/push": {
    /** Push a plugin to the registry. */
    post: operations["PluginPush"];
  };
  "/plugins/{name}/set": {
    post: operations["PluginSet"];
  };
  "/nodes": {
    get: operations["NodeList"];
  };
  "/nodes/{id}": {
    get: operations["NodeInspect"];
    delete: operations["NodeDelete"];
  };
  "/nodes/{id}/update": {
    post: operations["NodeUpdate"];
  };
  "/swarm": {
    get: operations["SwarmInspect"];
  };
  "/swarm/init": {
    post: operations["SwarmInit"];
  };
  "/swarm/join": {
    post: operations["SwarmJoin"];
  };
  "/swarm/leave": {
    post: operations["SwarmLeave"];
  };
  "/swarm/update": {
    post: operations["SwarmUpdate"];
  };
  "/swarm/unlockkey": {
    get: operations["SwarmUnlockkey"];
  };
  "/swarm/unlock": {
    post: operations["SwarmUnlock"];
  };
  "/services": {
    get: operations["ServiceList"];
  };
  "/services/create": {
    post: operations["ServiceCreate"];
  };
  "/services/{id}": {
    get: operations["ServiceInspect"];
    delete: operations["ServiceDelete"];
  };
  "/services/{id}/update": {
    post: operations["ServiceUpdate"];
  };
  "/services/{id}/logs": {
    /**
     * Get `stdout` and `stderr` logs from a service.
     *
     * **Note**: This endpoint works only for services with the `json-file` or `journald` logging drivers.
     */
    get: operations["ServiceLogs"];
  };
  "/tasks": {
    get: operations["TaskList"];
  };
  "/tasks/{id}": {
    get: operations["TaskInspect"];
  };
  "/secrets": {
    get: operations["SecretList"];
  };
  "/secrets/create": {
    post: operations["SecretCreate"];
  };
  "/secrets/{id}": {
    get: operations["SecretInspect"];
    delete: operations["SecretDelete"];
  };
  "/secrets/{id}/update": {
    post: operations["SecretUpdate"];
  };
}

export interface definitions {
  /**
   * @description An open port on a container
   * @example {
   *   "PrivatePort": 8080,
   *   "PublicPort": 80,
   *   "Type": "tcp"
   * }
   */
  Port: {
    /** Format: ip-address */
    IP?: string;
    /**
     * Format: uint16
     * @description Port on the container
     */
    PrivatePort: number;
    /**
     * Format: uint16
     * @description Port exposed on the host
     */
    PublicPort?: number;
    /** @enum {string} */
    Type: "tcp" | "udp";
  };
  /**
   * @description MountPoint represents a mount point configuration inside the container.
   * This is used for reporting the mountpoints in use by a container.
   */
  MountPoint: {
    /**
     * @description The mount type:
     *
     * - `bind` a mount of a file or directory from the host into the container.
     * - `volume` a docker volume with the given `Name`.
     * - `tmpfs` a `tmpfs`.
     *
     * @example volume
     * @enum {string}
     */
    Type?: "bind" | "volume" | "tmpfs";
    /**
     * @description Name is the name reference to the underlying data defined by `Source`
     * e.g., the volume name.
     *
     * @example myvolume
     */
    Name?: string;
    /**
     * @description Source location of the mount.
     *
     * For volumes, this contains the storage location of the volume (within
     * `/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains
     * the source (host) part of the bind-mount. For `tmpfs` mount points, this
     * field is empty.
     *
     * @example /var/lib/docker/volumes/myvolume/_data
     */
    Source?: string;
    /**
     * @description Destination is the path relative to the container root (`/`) where
     * the `Source` is mounted inside the container.
     *
     * @example /usr/share/nginx/html/
     */
    Destination?: string;
    /**
     * @description Driver is the volume driver used to create the volume (if it is a volume).
     *
     * @example local
     */
    Driver?: string;
    /**
     * @description Mode is a comma separated list of options supplied by the user when
     * creating the bind/volume mount.
     *
     * The default is platform-specific (`"z"` on Linux, empty on Windows).
     *
     * @example z
     */
    Mode?: string;
    /**
     * @description Whether the mount is mounted writable (read-write).
     *
     * @example true
     */
    RW?: boolean;
    /**
     * @description Propagation describes how mounts are propagated from the host into the
     * mount point, and vice-versa. Refer to the [Linux kernel documentation](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt)
     * for details. This field is not used on Windows.
     *
     * @example
     */
    Propagation?: string;
  };
  /**
   * @description A device mapping between the host and container
   * @example {
   *   "PathOnHost": "/dev/deviceName",
   *   "PathInContainer": "/dev/deviceName",
   *   "CgroupPermissions": "mrw"
   * }
   */
  DeviceMapping: {
    PathOnHost?: string;
    PathInContainer?: string;
    CgroupPermissions?: string;
  };
  ThrottleDevice: {
    /** @description Device path */
    Path?: string;
    /**
     * Format: int64
     * @description Rate
     */
    Rate?: number;
  };
  Mount: {
    /** @description Container path. */
    Target?: string;
    /** @description Mount source (e.g. a volume name, a host path). */
    Source?: unknown;
    /**
     * @description The mount type. Available types:
     *
     * - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.
     * - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.
     * - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.
     *
     * @enum {string}
     */
    Type?: "bind" | "volume" | "tmpfs";
    /** @description Whether the mount should be read-only. */
    ReadOnly?: boolean;
    /** @description Optional configuration for the `bind` type. */
    BindOptions?: {
      /**
       * @description A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
       * @enum {undefined}
       */
      Propagation?:
        | "private"
        | "rprivate"
        | "shared"
        | "rshared"
        | "slave"
        | "rslave";
    };
    /** @description Optional configuration for the `volume` type. */
    VolumeOptions?: {
      /**
       * @description Populate volume with data from the target.
       * @default false
       */
      NoCopy?: boolean;
      /** @description User-defined key/value metadata. */
      Labels?: { [key: string]: string };
      /** @description Map of driver specific options */
      DriverConfig?: {
        /** @description Name of the driver to use to create the volume. */
        Name?: string;
        /** @description key/value map of driver specific options. */
        Options?: { [key: string]: string };
      };
    };
    /** @description Optional configuration for the `tmpfs` type. */
    TmpfsOptions?: {
      /**
       * Format: int64
       * @description The size for the tmpfs mount in bytes.
       */
      SizeBytes?: number;
      /** @description The permission mode for the tmpfs mount in an integer. */
      Mode?: number;
    };
  };
  /**
   * @description The behavior to apply when the container exits. The default is not to restart.
   *
   * An ever increasing delay (double the previous delay, starting at 100ms) is added before each restart to prevent flooding the server.
   *
   * @default {}
   */
  RestartPolicy: {
    /**
     * @description - `always` Always restart
     * - `unless-stopped` Restart always except when the user has manually stopped the container
     * - `on-failure` Restart only when the container exit code is non-zero
     *
     * @enum {string}
     */
    Name?: "always" | "unless-stopped" | "on-failure";
    /** @description If `on-failure` is used, the number of times to retry before giving up */
    MaximumRetryCount?: number;
  };
  /** @description A container's resources (cgroups config, ulimits, etc) */
  Resources: {
    /** @description An integer value representing this container's relative CPU weight versus other containers. */
    CpuShares?: number;
    /**
     * @description Memory limit in bytes.
     * @default 0
     */
    Memory?: number;
    /** @description Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist. */
    CgroupParent?: string;
    /** @description Block IO weight (relative weight). */
    BlkioWeight?: number;
    /** @description Block IO weight (relative device weight) in the form `[{"Path": "device_path", "Weight": weight}]`. */
    BlkioWeightDevice?: {
      Path?: string;
      Weight?: number;
    }[];
    /** @description Limit read rate (bytes per second) from a device, in the form `[{"Path": "device_path", "Rate": rate}]`. */
    BlkioDeviceReadBps?: definitions["ThrottleDevice"][];
    /** @description Limit write rate (bytes per second) to a device, in the form `[{"Path": "device_path", "Rate": rate}]`. */
    BlkioDeviceWriteBps?: definitions["ThrottleDevice"][];
    /** @description Limit read rate (IO per second) from a device, in the form `[{"Path": "device_path", "Rate": rate}]`. */
    BlkioDeviceReadIOps?: definitions["ThrottleDevice"][];
    /** @description Limit write rate (IO per second) to a device, in the form `[{"Path": "device_path", "Rate": rate}]`. */
    BlkioDeviceWriteIOps?: definitions["ThrottleDevice"][];
    /**
     * Format: int64
     * @description The length of a CPU period in microseconds.
     */
    CpuPeriod?: number;
    /**
     * Format: int64
     * @description Microseconds of CPU time that the container can get in a CPU period.
     */
    CpuQuota?: number;
    /**
     * Format: int64
     * @description The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     */
    CpuRealtimePeriod?: number;
    /**
     * Format: int64
     * @description The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.
     */
    CpuRealtimeRuntime?: number;
    /** @description CPUs in which to allow execution (e.g., `0-3`, `0,1`) */
    CpusetCpus?: string;
    /** @description Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems. */
    CpusetMems?: string;
    /** @description A list of devices to add to the container. */
    Devices?: definitions["DeviceMapping"][];
    /** @description a list of cgroup rules to apply to the container */
    DeviceCgroupRules?: string[];
    /**
     * Format: int64
     * @description Disk limit (in bytes).
     */
    DiskQuota?: number;
    /**
     * Format: int64
     * @description Kernel memory limit in bytes.
     */
    KernelMemory?: number;
    /**
     * Format: int64
     * @description Memory soft limit in bytes.
     */
    MemoryReservation?: number;
    /**
     * Format: int64
     * @description Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.
     */
    MemorySwap?: number;
    /**
     * Format: int64
     * @description Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
     */
    MemorySwappiness?: number;
    /**
     * Format: int64
     * @description CPU quota in units of 10<sup>-9</sup> CPUs.
     */
    NanoCpus?: number;
    /** @description Disable OOM Killer for the container. */
    OomKillDisable?: boolean;
    /**
     * Format: int64
     * @description Tune a container's pids limit. Set -1 for unlimited.
     */
    PidsLimit?: number;
    /** @description A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`" */
    Ulimits?: {
      /** @description Name of ulimit */
      Name?: string;
      /** @description Soft limit */
      Soft?: number;
      /** @description Hard limit */
      Hard?: number;
    }[];
    /**
     * Format: int64
     * @description The number of usable CPUs (Windows only).
     *
     * On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     */
    CpuCount?: number;
    /**
     * Format: int64
     * @description The usable percentage of the available CPUs (Windows only).
     *
     * On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.
     */
    CpuPercent?: number;
    /**
     * Format: int64
     * @description Maximum IOps for the container system drive (Windows only)
     */
    IOMaximumIOps?: number;
    /**
     * Format: int64
     * @description Maximum IO in bytes per second for the container system drive (Windows only)
     */
    IOMaximumBandwidth?: number;
  };
  /** @description A test to perform to check that the container is healthy. */
  HealthConfig: {
    /**
     * @description The test to perform. Possible values are:
     *
     * - `[]` inherit healthcheck from image or parent image
     * - `["NONE"]` disable healthcheck
     * - `["CMD", args...]` exec arguments directly
     * - `["CMD-SHELL", command]` run command with system's default shell
     */
    Test?: string[];
    /** @description The time to wait between checks in nanoseconds. It should be 0 or not less than 1000000000(1s). 0 means inherit. */
    Interval?: number;
    /** @description The time to wait before considering the check to have hung. It should be 0 or not less than 1000000000(1s). 0 means inherit. */
    Timeout?: number;
    /** @description The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit. */
    Retries?: number;
  };
  /** @description Container configuration that depends on the host we are running on */
  HostConfig: definitions["Resources"] & {
    /**
     * @description A list of volume bindings for this container. Each volume binding is a string in one of these forms:
     *
     * - `host-src:container-dest` to bind-mount a host path into the container. Both `host-src`, and `container-dest` must be an _absolute_ path.
     * - `host-src:container-dest:ro` to make the bind-mount read-only inside the container. Both `host-src`, and `container-dest` must be an _absolute_ path.
     * - `volume-name:container-dest` to bind-mount a volume managed by a volume driver into the container. `container-dest` must be an _absolute_ path.
     * - `volume-name:container-dest:ro` to mount the volume read-only inside the container.  `container-dest` must be an _absolute_ path.
     */
    Binds?: string[];
    /** @description Path to a file where the container ID is written */
    ContainerIDFile?: string;
    /** @description The logging configuration for this container */
    LogConfig?: {
      /** @enum {string} */
      Type?:
        | "json-file"
        | "syslog"
        | "journald"
        | "gelf"
        | "fluentd"
        | "awslogs"
        | "splunk"
        | "etwlogs"
        | "none";
      Config?: { [key: string]: string };
    };
    /** @description Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to. */
    NetworkMode?: string;
    /** @description A map of exposed container ports and the host port they should map to. */
    PortBindings?: {
      [key: string]: {
        /** @description The host IP address */
        HostIp?: string;
        /** @description The host port number, as a string */
        HostPort?: string;
      };
    };
    RestartPolicy?: definitions["RestartPolicy"];
    /** @description Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set. */
    AutoRemove?: boolean;
    /** @description Driver that this container uses to mount volumes. */
    VolumeDriver?: string;
    /** @description A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`. */
    VolumesFrom?: string[];
    /** @description Specification for mounts to be added to the container. */
    Mounts?: definitions["Mount"][];
    /** @description A list of kernel capabilities to add to the container. */
    CapAdd?: string[];
    /** @description A list of kernel capabilities to drop from the container. */
    CapDrop?: string[];
    /** @description A list of DNS servers for the container to use. */
    Dns?: string[];
    /** @description A list of DNS options. */
    DnsOptions?: string[];
    /** @description A list of DNS search domains. */
    DnsSearch?: string[];
    /** @description A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `["hostname:IP"]`. */
    ExtraHosts?: string[];
    /** @description A list of additional groups that the container process will run as. */
    GroupAdd?: string[];
    /** @description IPC namespace to use for the container. */
    IpcMode?: string;
    /** @description Cgroup to use for the container. */
    Cgroup?: string;
    /** @description A list of links for the container in the form `container_name:alias`. */
    Links?: string[];
    /** @description An integer value containing the score given to the container in order to tune OOM killer preferences. */
    OomScoreAdj?: number;
    /**
     * @description Set the PID (Process) Namespace mode for the container. It can be either:
     *
     * - `"container:<name|id>"`: joins another container's PID namespace
     * - `"host"`: use the host's PID namespace inside the container
     */
    PidMode?: string;
    /** @description Gives the container full access to the host. */
    Privileged?: boolean;
    /** @description Allocates a random host port for all of a container's exposed ports. */
    PublishAllPorts?: boolean;
    /** @description Mount the container's root filesystem as read only. */
    ReadonlyRootfs?: boolean;
    /** @description A list of string values to customize labels for MLS systems, such as SELinux. */
    SecurityOpt?: string[];
    /** @description Storage driver options for this container, in the form `{"size": "120G"}`. */
    StorageOpt?: { [key: string]: string };
    /** @description A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ "/run": "rw,noexec,nosuid,size=65536k" }`. */
    Tmpfs?: { [key: string]: string };
    /** @description UTS namespace to use for the container. */
    UTSMode?: string;
    /** @description Sets the usernamespace mode for the container when usernamespace remapping option is enabled. */
    UsernsMode?: string;
    /** @description Size of `/dev/shm` in bytes. If omitted, the system uses 64MB. */
    ShmSize?: number;
    /** @description A list of kernel parameters (sysctls) to set in the container. For example: `{"net.ipv4.ip_forward": "1"}` */
    Sysctls?: { [key: string]: string };
    /** @description Runtime to use with this container. */
    Runtime?: string;
    /** @description Initial console size, as an `[height, width]` array. (Windows only) */
    ConsoleSize?: number[];
    /**
     * @description Isolation technology of the container. (Windows only)
     * @enum {string}
     */
    Isolation?: "default" | "process" | "hyperv";
  };
  /** @description Configuration for a container that is portable between hosts */
  Config: {
    /** @description The hostname to use for the container, as a valid RFC 1123 hostname. */
    Hostname?: string;
    /** @description The domain name to use for the container. */
    Domainname?: string;
    /** @description The user that commands are run as inside the container. */
    User?: string;
    /**
     * @description Whether to attach to `stdin`.
     * @default false
     */
    AttachStdin?: boolean;
    /**
     * @description Whether to attach to `stdout`.
     * @default true
     */
    AttachStdout?: boolean;
    /**
     * @description Whether to attach to `stderr`.
     * @default true
     */
    AttachStderr?: boolean;
    /**
     * @description An object mapping ports to an empty object in the form:
     *
     * `{"<port>/<tcp|udp>": {}}`
     */
    ExposedPorts?: { [key: string]: {} };
    /**
     * @description Attach standard streams to a TTY, including `stdin` if it is not closed.
     * @default false
     */
    Tty?: boolean;
    /**
     * @description Open `stdin`
     * @default false
     */
    OpenStdin?: boolean;
    /**
     * @description Close `stdin` after one attached client disconnects
     * @default false
     */
    StdinOnce?: boolean;
    /** @description A list of environment variables to set inside the container in the form `["VAR=value", ...]` */
    Env?: string[];
    /** @description Command to run specified as a string or an array of strings. */
    Cmd?: string[];
    Healthcheck?: definitions["HealthConfig"];
    /** @description Command is already escaped (Windows only) */
    ArgsEscaped?: boolean;
    /** @description The name of the image to use when creating the container */
    Image?: string;
    /** @description An object mapping mount point paths inside the container to empty objects. */
    Volumes?: {
      /**
       * @default {}
       * @enum {object}
       */
      additionalProperties?: {};
    };
    /** @description The working directory for commands to run in. */
    WorkingDir?: string;
    /**
     * @description The entry point for the container as a string or an array of strings.
     *
     * If the array consists of exactly one empty string (`[""]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
     */
    Entrypoint?: string[];
    /** @description Disable networking for the container. */
    NetworkDisabled?: boolean;
    /** @description MAC address of the container. */
    MacAddress?: string;
    /** @description `ONBUILD` metadata that were defined in the image's `Dockerfile`. */
    OnBuild?: string[];
    /** @description User-defined key/value metadata. */
    Labels?: { [key: string]: string };
    /**
     * @description Signal to stop a container as a string or unsigned integer.
     * @default SIGTERM
     */
    StopSignal?: string;
    /**
     * @description Timeout to stop a container in seconds.
     * @default 10
     */
    StopTimeout?: number;
    /** @description Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell. */
    Shell?: string[];
  };
  /** @description TODO: check is correct */
  NetworkConfig: {
    Bridge?: string;
    Gateway?: string;
    Address?: string;
    IPPrefixLen?: number;
    MacAddress?: string;
    PortMapping?: string;
    Ports?: definitions["Port"][];
  };
  /** @description Information about a container's graph driver. */
  GraphDriverData: {
    Name: string;
    Data: { [key: string]: string };
  };
  Image: {
    Id: string;
    RepoTags?: string[];
    RepoDigests?: string[];
    Parent: string;
    Comment: string;
    Created: string;
    Container: string;
    ContainerConfig?: definitions["Config"];
    DockerVersion: string;
    Author: string;
    Config?: definitions["Config"];
    Architecture: string;
    Os: string;
    OsVersion?: string;
    /** Format: int64 */
    Size: number;
    /** Format: int64 */
    VirtualSize: number;
    GraphDriver: definitions["GraphDriverData"];
    RootFS: {
      Type: string;
      Layers?: string[];
    };
  };
  ImageSummary: {
    Id: string;
    ParentId: string;
    RepoTags: string[];
    RepoDigests: string[];
    Created: number;
    Size: number;
    SharedSize: number;
    VirtualSize: number;
    Labels: { [key: string]: string };
    Containers: number;
  };
  /**
   * @example {
   *   "username": "hannibal",
   *   "password": "xxxx",
   *   "serveraddress": "https://index.docker.io/v1/"
   * }
   */
  AuthConfig: {
    username?: string;
    password?: string;
    email?: string;
    serveraddress?: string;
  };
  ProcessConfig: {
    privileged?: boolean;
    user?: string;
    tty?: boolean;
    entrypoint?: string;
    arguments?: string[];
  };
  /**
   * @example {
   *   "Name": "tardis",
   *   "Driver": "custom",
   *   "Mountpoint": "/var/lib/docker/volumes/tardis",
   *   "Status": {
   *     "hello": "world"
   *   },
   *   "Labels": {
   *     "com.example.some-label": "some-value",
   *     "com.example.some-other-label": "some-other-value"
   *   },
   *   "Scope": "local"
   * }
   */
  Volume: {
    /** @description Name of the volume. */
    Name: string;
    /** @description Name of the volume driver used by the volume. */
    Driver: string;
    /** @description Mount path of the volume on the host. */
    Mountpoint: string;
    /**
     * @description Low-level details about the volume, provided by the volume driver.
     * Details are returned as a map with key/value pairs:
     * `{"key":"value","key2":"value2"}`.
     *
     * The `Status` field is optional, and is omitted if the volume driver
     * does not support this feature.
     */
    Status?: { [key: string]: { [key: string]: unknown } };
    /** @description User-defined key/value metadata. */
    Labels: { [key: string]: string };
    /**
     * @description The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level.
     * @default local
     * @enum {string}
     */
    Scope: "local" | "global";
    /** @description The driver specific options used when creating the volume. */
    Options: { [key: string]: string };
    UsageData?: {
      /**
       * @description The disk space used by the volume (local driver only)
       * @default -1
       */
      Size: number;
      /**
       * @description The number of containers referencing this volume.
       * @default -1
       */
      RefCount: number;
    };
  };
  /**
   * @example {
   *   "Name": "net01",
   *   "Id": "7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99",
   *   "Created": "2016-10-19T04:33:30.360899459Z",
   *   "Scope": "local",
   *   "Driver": "bridge",
   *   "EnableIPv6": false,
   *   "IPAM": {
   *     "Driver": "default",
   *     "Config": [
   *       {
   *         "Subnet": "172.19.0.0/16",
   *         "Gateway": "172.19.0.1"
   *       }
   *     ],
   *     "Options": {
   *       "foo": "bar"
   *     }
   *   },
   *   "Internal": false,
   *   "Attachable": false,
   *   "Containers": {
   *     "19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c": {
   *       "Name": "test",
   *       "EndpointID": "628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a",
   *       "MacAddress": "02:42:ac:13:00:02",
   *       "IPv4Address": "172.19.0.2/16",
   *       "IPv6Address": ""
   *     }
   *   },
   *   "Options": {
   *     "com.docker.network.bridge.default_bridge": "true",
   *     "com.docker.network.bridge.enable_icc": "true",
   *     "com.docker.network.bridge.enable_ip_masquerade": "true",
   *     "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
   *     "com.docker.network.bridge.name": "docker0",
   *     "com.docker.network.driver.mtu": "1500"
   *   },
   *   "Labels": {
   *     "com.example.some-label": "some-value",
   *     "com.example.some-other-label": "some-other-value"
   *   }
   * }
   */
  Network: {
    Name?: string;
    Id?: string;
    /** Format: dateTime */
    Created?: string;
    Scope?: string;
    Driver?: string;
    EnableIPv6?: boolean;
    IPAM?: definitions["IPAM"];
    Internal?: boolean;
    Attachable?: boolean;
    Containers?: { [key: string]: definitions["NetworkContainer"] };
    Options?: { [key: string]: string };
    Labels?: { [key: string]: string };
  };
  IPAM: {
    /**
     * @description Name of the IPAM driver to use.
     * @default default
     */
    Driver?: string;
    /** @description List of IPAM configuration options, specified as a map: `{"Subnet": <CIDR>, "IPRange": <CIDR>, "Gateway": <IP address>, "AuxAddress": <device_name:IP address>}` */
    Config?: { [key: string]: string }[];
    /** @description Driver-specific options, specified as a map. */
    Options?: { [key: string]: string }[];
  };
  NetworkContainer: {
    EndpointID?: string;
    MacAddress?: string;
    IPv4Address?: string;
    IPv6Address?: string;
  };
  BuildInfo: {
    id?: string;
    stream?: string;
    error?: string;
    errorDetail?: definitions["ErrorDetail"];
    status?: string;
    progress?: string;
    progressDetail?: definitions["ProgressDetail"];
  };
  CreateImageInfo: {
    error?: string;
    status?: string;
    progress?: string;
    progressDetail?: definitions["ProgressDetail"];
  };
  PushImageInfo: {
    error?: string;
    status?: string;
    progress?: string;
    progressDetail?: definitions["ProgressDetail"];
  };
  ErrorDetail: {
    code?: number;
    message?: string;
  };
  ProgressDetail: {
    code?: number;
    message?: number;
  };
  /**
   * @description Represents an error.
   * @example {
   *   "message": "Something went wrong."
   * }
   */
  ErrorResponse: {
    /** @description The error message. */
    message: string;
  };
  /** @description Response to an API call that returns just an Id */
  IdResponse: {
    /** @description The id of the newly created object. */
    Id: string;
  };
  /** @description Configuration for a network endpoint. */
  EndpointSettings: {
    /** @description IPAM configurations for the endpoint */
    IPAMConfig?: {
      IPv4Address?: string;
      IPv6Address?: string;
      LinkLocalIPs?: string[];
    };
    Links?: string[];
    Aliases?: string[];
    NetworkID?: string;
    EndpointID?: string;
    Gateway?: string;
    IPAddress?: string;
    IPPrefixLen?: number;
    IPv6Gateway?: string;
    GlobalIPv6Address?: string;
    /** Format: int64 */
    GlobalIPv6PrefixLen?: number;
    MacAddress?: string;
  };
  PluginMount: {
    Name: string;
    Description: string;
    Settable: string[];
    Source: string;
    Destination: string;
    Type: string;
    Options: string[];
  };
  PluginDevice: {
    Name: string;
    Description: string;
    Settable: string[];
    Path: string;
  };
  PluginEnv: {
    Name: string;
    Description: string;
    Settable: string[];
    Value: string;
  };
  PluginInterfaceType: {
    Prefix: string;
    Capability: string;
    Version: string;
  };
  /**
   * @description A plugin for the Engine API
   * @example {
   *   "Id": "5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078",
   *   "Name": "tiborvass/sample-volume-plugin",
   *   "Tag": "latest",
   *   "Active": true,
   *   "Settings": {
   *     "Env": [
   *       "DEBUG=0"
   *     ],
   *     "Args": null,
   *     "Devices": null
   *   },
   *   "Config": {
   *     "Description": "A sample volume plugin for Docker",
   *     "Documentation": "/engine/extend/plugins/",
   *     "Interface": {
   *       "Types": [
   *         "docker.volumedriver/1.0"
   *       ],
   *       "Socket": "plugins.sock"
   *     },
   *     "Entrypoint": [
   *       "/usr/bin/sample-volume-plugin",
   *       "/data"
   *     ],
   *     "WorkDir": "",
   *     "User": {},
   *     "Network": {
   *       "Type": ""
   *     },
   *     "Linux": {
   *       "Capabilities": null,
   *       "AllowAllDevices": false,
   *       "Devices": null
   *     },
   *     "Mounts": null,
   *     "PropagatedMount": "/data",
   *     "Env": [
   *       {
   *         "Name": "DEBUG",
   *         "Description": "If set, prints debug messages",
   *         "Settable": null,
   *         "Value": "0"
   *       }
   *     ],
   *     "Args": {
   *       "Name": "args",
   *       "Description": "command line arguments",
   *       "Settable": null,
   *       "Value": []
   *     }
   *   }
   * }
   */
  Plugin: {
    Id?: string;
    Name: string;
    /** @description True when the plugin is running. False when the plugin is not running, only installed. */
    Enabled: boolean;
    /** @description Settings that can be modified by users. */
    Settings: {
      Mounts: definitions["PluginMount"][];
      Env: string[];
      Args: string[];
      Devices: definitions["PluginDevice"][];
    };
    /** @description plugin remote reference used to push/pull the plugin */
    PluginReference?: string;
    /** @description The config of a plugin. */
    Config: {
      Description: string;
      Documentation: string;
      /** @description The interface between Docker and the plugin */
      Interface: {
        Types: definitions["PluginInterfaceType"][];
        Socket: string;
      };
      Entrypoint: string[];
      WorkDir: string;
      User?: {
        /** Format: uint32 */
        UID?: number;
        /** Format: uint32 */
        GID?: number;
      };
      Network: {
        Type: string;
      };
      Linux: {
        Capabilities: string[];
        AllowAllDevices: boolean;
        Devices: definitions["PluginDevice"][];
      };
      PropagatedMount: string;
      Mounts: definitions["PluginMount"][];
      Env: definitions["PluginEnv"][];
      Args: {
        Name: string;
        Description: string;
        Settable: string[];
        Value: string[];
      };
      rootfs?: {
        type?: string;
        diff_ids?: string[];
      };
    };
  };
  /**
   * @description The version number of the object such as node, service, etc. This is needed to avoid conflicting writes.
   * The client must send the version number along with the modified specification when updating these objects.
   * This approach ensures safe concurrency and determinism in that the change on the object
   * may not be applied if the version number has changed from the last read. In other words,
   * if two update requests specify the same base version, only one of the requests can succeed.
   * As a result, two separate update requests that happen at the same time will not
   * unintentially overwrite each other.
   */
  ObjectVersion: {
    /** Format: int64 */
    Index?: number;
  };
  /**
   * @example {
   *   "Availability": "active",
   *   "Name": "node-name",
   *   "Role": "manager",
   *   "Labels": {
   *     "foo": "bar"
   *   }
   * }
   */
  NodeSpec: {
    /** @description Name for the node. */
    Name?: string;
    /** @description User-defined key/value metadata. */
    Labels?: { [key: string]: string };
    /**
     * @description Role of the node.
     * @enum {string}
     */
    Role?: "worker" | "manager";
    /**
     * @description Availability of the node.
     * @enum {string}
     */
    Availability?: "active" | "pause" | "drain";
  };
  /**
   * @example {
   *   "ID": "24ifsmvkjbyhk",
   *   "Version": {
   *     "Index": 8
   *   },
   *   "CreatedAt": "2016-06-07T20:31:11.853781916Z",
   *   "UpdatedAt": "2016-06-07T20:31:11.999868824Z",
   *   "Spec": {
   *     "Name": "my-node",
   *     "Role": "manager",
   *     "Availability": "active",
   *     "Labels": {
   *       "foo": "bar"
   *     }
   *   },
   *   "Description": {
   *     "Hostname": "bf3067039e47",
   *     "Platform": {
   *       "Architecture": "x86_64",
   *       "OS": "linux"
   *     },
   *     "Resources": {
   *       "NanoCPUs": 4000000000,
   *       "MemoryBytes": 8272408576
   *     },
   *     "Engine": {
   *       "EngineVersion": "17.04.0",
   *       "Labels": {
   *         "foo": "bar"
   *       },
   *       "Plugins": [
   *         {
   *           "Type": "Volume",
   *           "Name": "local"
   *         },
   *         {
   *           "Type": "Network",
   *           "Name": "bridge"
   *         },
   *         {
   *           "Type": "Network",
   *           "Name": "null"
   *         },
   *         {
   *           "Type": "Network",
   *           "Name": "overlay"
   *         }
   *       ]
   *     }
   *   },
   *   "Status": {
   *     "State": "ready",
   *     "Addr": "172.17.0.2"
   *   },
   *   "ManagerStatus": {
   *     "Leader": true,
   *     "Reachability": "reachable",
   *     "Addr": "172.17.0.2:2377"
   *   }
   * }
   */
  Node: {
    ID?: string;
    Version?: definitions["ObjectVersion"];
    /** Format: dateTime */
    CreatedAt?: string;
    /** Format: dateTime */
    UpdatedAt?: string;
    Spec?: definitions["NodeSpec"];
    Description?: {
      Hostname?: string;
      Platform?: {
        Architecture?: string;
        OS?: string;
      };
      Resources?: {
        /** Format: int64 */
        NanoCPUs?: number;
        /** Format: int64 */
        MemoryBytes?: number;
      };
      Engine?: {
        EngineVersion?: string;
        Labels?: { [key: string]: string };
        Plugins?: {
          Type?: string;
          Name?: string;
        }[];
      };
    };
  };
  /**
   * @description User modifiable swarm configuration.
   * @example {
   *   "Name": "default",
   *   "Orchestration": {
   *     "TaskHistoryRetentionLimit": 10
   *   },
   *   "Raft": {
   *     "SnapshotInterval": 10000,
   *     "LogEntriesForSlowFollowers": 500,
   *     "HeartbeatTick": 1,
   *     "ElectionTick": 3
   *   },
   *   "Dispatcher": {
   *     "HeartbeatPeriod": 5000000000
   *   },
   *   "CAConfig": {
   *     "NodeCertExpiry": 7776000000000000
   *   },
   *   "JoinTokens": {
   *     "Worker": "SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx",
   *     "Manager": "SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2"
   *   },
   *   "EncryptionConfig": {
   *     "AutoLockManagers": false
   *   }
   * }
   */
  SwarmSpec: {
    /** @description Name of the swarm. */
    Name?: string;
    /** @description User-defined key/value metadata. */
    Labels?: { [key: string]: string };
    /** @description Orchestration configuration. */
    Orchestration?: {
      /**
       * Format: int64
       * @description The number of historic tasks to keep per instance or node. If negative, never remove completed or failed tasks.
       */
      TaskHistoryRetentionLimit?: number;
    };
    /** @description Raft configuration. */
    Raft?: {
      /**
       * Format: int64
       * @description The number of log entries between snapshots.
       */
      SnapshotInterval?: number;
      /**
       * Format: int64
       * @description The number of snapshots to keep beyond the current snapshot.
       */
      KeepOldSnapshots?: number;
      /**
       * Format: int64
       * @description The number of log entries to keep around to sync up slow followers after a snapshot is created.
       */
      LogEntriesForSlowFollowers?: number;
      /**
       * @description The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. `ElectionTick` must be greater than `HeartbeatTick`.
       *
       * A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
       */
      ElectionTick?: number;
      /**
       * @description The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.
       *
       * A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed.
       */
      HeartbeatTick?: number;
    };
    /** @description Dispatcher configuration. */
    Dispatcher?: {
      /**
       * Format: int64
       * @description The delay for an agent to send a heartbeat to the dispatcher.
       */
      HeartbeatPeriod?: number;
    };
    /** @description CA configuration. */
    CAConfig?: {
      /**
       * Format: int64
       * @description The duration node certificates are issued for.
       */
      NodeCertExpiry?: number;
      /** @description Configuration for forwarding signing requests to an external certificate authority. */
      ExternalCAs?: {
        /**
         * @description Protocol for communication with the external CA (currently only `cfssl` is supported).
         * @default cfssl
         * @enum {string}
         */
        Protocol?: "cfssl";
        /** @description URL where certificate signing requests should be sent. */
        URL?: string;
        /** @description An object with key/value pairs that are interpreted as protocol-specific options for the external CA driver. */
        Options?: { [key: string]: string };
      }[];
    };
    /** @description Parameters related to encryption-at-rest. */
    EncryptionConfig?: {
      /** @description If set, generate a key and use it to lock data stored on the managers. */
      AutoLockManagers?: boolean;
    };
    /** @description Defaults for creating tasks in this cluster. */
    TaskDefaults?: {
      /**
       * @description The log driver to use for tasks created in the orchestrator if unspecified by a service.
       *
       * Updating this value will only have an affect on new tasks. Old tasks will continue use their previously configured log driver until recreated.
       */
      LogDriver?: {
        Name?: string;
        Options?: { [key: string]: string };
      };
    };
  };
  ClusterInfo: {
    /** @description The ID of the swarm. */
    ID?: string;
    Version?: definitions["ObjectVersion"];
    /** Format: dateTime */
    CreatedAt?: string;
    /** Format: dateTime */
    UpdatedAt?: string;
    Spec?: definitions["SwarmSpec"];
  };
  /** @description User modifiable task configuration. */
  TaskSpec: {
    ContainerSpec?: {
      /** @description The image name to use for the container. */
      Image?: string;
      /** @description User-defined key/value data. */
      Labels?: { [key: string]: string };
      /** @description The command to be run in the image. */
      Command?: string[];
      /** @description Arguments to the command. */
      Args?: string[];
      /** @description The hostname to use for the container, as a valid RFC 1123 hostname. */
      Hostname?: string;
      /** @description A list of environment variables in the form `VAR=value`. */
      Env?: string[];
      /** @description The working directory for commands to run in. */
      Dir?: string;
      /** @description The user inside the container. */
      User?: string;
      /** @description A list of additional groups that the container process will run as. */
      Groups?: string[];
      /** @description Whether a pseudo-TTY should be allocated. */
      TTY?: boolean;
      /** @description Open `stdin` */
      OpenStdin?: boolean;
      /** @description Mount the container's root filesystem as read only. */
      ReadOnly?: boolean;
      /** @description Specification for mounts to be added to containers created as part of the service. */
      Mounts?: definitions["Mount"][];
      /** @description Signal to stop the container. */
      StopSignal?: string;
      /**
       * Format: int64
       * @description Amount of time to wait for the container to terminate before forcefully killing it.
       */
      StopGracePeriod?: number;
      HealthCheck?: definitions["HealthConfig"];
      /**
       * @description A list of hostnames/IP mappings to add to the container's `/etc/hosts` file.
       * The format of extra hosts on swarmkit is specified in:
       * http://man7.org/linux/man-pages/man5/hosts.5.html
       *   IP_address canonical_hostname [aliases...]
       */
      Hosts?: string[];
      /** @description Specification for DNS related configurations in resolver configuration file (`resolv.conf`). */
      DNSConfig?: {
        /** @description The IP addresses of the name servers. */
        Nameservers?: string[];
        /** @description A search list for host-name lookup. */
        Search?: string[];
        /** @description A list of internal resolver variables to be modified (e.g., `debug`, `ndots:3`, etc.). */
        Options?: string[];
      };
      /** @description Secrets contains references to zero or more secrets that will be exposed to the service. */
      Secrets?: {
        /** @description File represents a specific target that is backed by a file. */
        File?: {
          /** @description Name represents the final filename in the filesystem. */
          Name?: string;
          /** @description UID represents the file UID. */
          UID?: string;
          /** @description GID represents the file GID. */
          GID?: string;
          /**
           * Format: uint32
           * @description Mode represents the FileMode of the file.
           */
          Mode?: number;
        };
        /** @description SecretID represents the ID of the specific secret that we're referencing. */
        SecretID?: string;
        /**
         * @description SecretName is the name of the secret that this references, but this is just provided for
         * lookup/display purposes. The secret in the reference will be identified by its ID.
         */
        SecretName?: string;
      }[];
    };
    /** @description Resource requirements which apply to each individual container created as part of the service. */
    Resources?: {
      /** @description Define resources limits. */
      Limits?: {
        /**
         * Format: int64
         * @description CPU limit in units of 10<sup>-9</sup> CPU shares.
         */
        NanoCPUs?: number;
        /**
         * Format: int64
         * @description Memory limit in Bytes.
         */
        MemoryBytes?: number;
      };
      /** @description Define resources reservation. */
      Reservations?: {
        /**
         * Format: int64
         * @description CPU reservation in units of 10<sup>-9</sup> CPU shares.
         */
        NanoCPUs?: number;
        /**
         * Format: int64
         * @description Memory reservation in Bytes.
         */
        MemoryBytes?: number;
      };
    };
    /** @description Specification for the restart policy which applies to containers created as part of this service. */
    RestartPolicy?: {
      /**
       * @description Condition for restart.
       * @enum {string}
       */
      Condition?: "none" | "on-failure" | "any";
      /**
       * Format: int64
       * @description Delay between restart attempts.
       */
      Delay?: number;
      /**
       * Format: int64
       * @description Maximum attempts to restart a given container before giving up (default value is 0, which is ignored).
       * @default 0
       */
      MaxAttempts?: number;
      /**
       * Format: int64
       * @description Windows is the time window used to evaluate the restart policy (default value is 0, which is unbounded).
       * @default 0
       */
      Window?: number;
    };
    Placement?: {
      /** @description An array of constraints. */
      Constraints?: string[];
      /** @description Preferences provide a way to make the scheduler aware of factors such as topology. They are provided in order from highest to lowest precedence. */
      Preferences?: {
        Spread?: {
          /** @description label descriptor, such as engine.labels.az */
          SpreadDescriptor?: string;
        };
      }[];
    };
    /** @description A counter that triggers an update even if no relevant parameters have been changed. */
    ForceUpdate?: number;
    Networks?: {
      Target?: string;
      Aliases?: string[];
    }[];
    /** @description Specifies the log driver to use for tasks created from this spec. If not present, the default one for the swarm will be used, finally falling back to the engine default if not specified. */
    LogDriver?: {
      Name?: string;
      Options?: { [key: string]: string };
    };
  };
  /** @enum {string} */
  TaskState:
    | "new"
    | "allocated"
    | "pending"
    | "assigned"
    | "accepted"
    | "preparing"
    | "ready"
    | "starting"
    | "running"
    | "complete"
    | "shutdown"
    | "failed"
    | "rejected";
  /**
   * @example {
   *   "ID": "0kzzo1i0y4jz6027t0k7aezc7",
   *   "Version": {
   *     "Index": 71
   *   },
   *   "CreatedAt": "2016-06-07T21:07:31.171892745Z",
   *   "UpdatedAt": "2016-06-07T21:07:31.376370513Z",
   *   "Spec": {
   *     "ContainerSpec": {
   *       "Image": "redis"
   *     },
   *     "Resources": {
   *       "Limits": {},
   *       "Reservations": {}
   *     },
   *     "RestartPolicy": {
   *       "Condition": "any",
   *       "MaxAttempts": 0
   *     },
   *     "Placement": {}
   *   },
   *   "ServiceID": "9mnpnzenvg8p8tdbtq4wvbkcz",
   *   "Slot": 1,
   *   "NodeID": "60gvrl6tm78dmak4yl7srz94v",
   *   "Status": {
   *     "Timestamp": "2016-06-07T21:07:31.290032978Z",
   *     "State": "running",
   *     "Message": "started",
   *     "ContainerStatus": {
   *       "ContainerID": "e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035",
   *       "PID": 677
   *     }
   *   },
   *   "DesiredState": "running",
   *   "NetworksAttachments": [
   *     {
   *       "Network": {
   *         "ID": "4qvuz4ko70xaltuqbt8956gd1",
   *         "Version": {
   *           "Index": 18
   *         },
   *         "CreatedAt": "2016-06-07T20:31:11.912919752Z",
   *         "UpdatedAt": "2016-06-07T21:07:29.955277358Z",
   *         "Spec": {
   *           "Name": "ingress",
   *           "Labels": {
   *             "com.docker.swarm.internal": "true"
   *           },
   *           "DriverConfiguration": {},
   *           "IPAMOptions": {
   *             "Driver": {},
   *             "Configs": [
   *               {
   *                 "Subnet": "10.255.0.0/16",
   *                 "Gateway": "10.255.0.1"
   *               }
   *             ]
   *           }
   *         },
   *         "DriverState": {
   *           "Name": "overlay",
   *           "Options": {
   *             "com.docker.network.driver.overlay.vxlanid_list": "256"
   *           }
   *         },
   *         "IPAMOptions": {
   *           "Driver": {
   *             "Name": "default"
   *           },
   *           "Configs": [
   *             {
   *               "Subnet": "10.255.0.0/16",
   *               "Gateway": "10.255.0.1"
   *             }
   *           ]
   *         }
   *       },
   *       "Addresses": [
   *         "10.255.0.10/16"
   *       ]
   *     }
   *   ]
   * }
   */
  Task: {
    /** @description The ID of the task. */
    ID?: string;
    Version?: definitions["ObjectVersion"];
    /** Format: dateTime */
    CreatedAt?: string;
    /** Format: dateTime */
    UpdatedAt?: string;
    /** @description Name of the task. */
    Name?: string;
    /** @description User-defined key/value metadata. */
    Labels?: { [key: string]: string };
    Spec?: definitions["TaskSpec"];
    /** @description The ID of the service this task is part of. */
    ServiceID?: string;
    Slot?: number;
    /** @description The ID of the node that this task is on. */
    NodeID?: string;
    Status?: {
      /** Format: dateTime */
      Timestamp?: string;
      State?: definitions["TaskState"];
      Message?: string;
      Err?: string;
      ContainerStatus?: {
        ContainerID?: string;
        PID?: number;
        ExitCode?: number;
      };
    };
    DesiredState?: definitions["TaskState"];
  };
  /** @description User modifiable configuration for a service. */
  ServiceSpec: {
    /** @description Name of the service. */
    Name?: string;
    /** @description User-defined key/value metadata. */
    Labels?: { [key: string]: string };
    TaskTemplate?: definitions["TaskSpec"];
    /** @description Scheduling mode for the service. */
    Mode?: {
      Replicated?: {
        /** Format: int64 */
        Replicas?: number;
      };
      Global?: { [key: string]: unknown };
    };
    /** @description Specification for the update strategy of the service. */
    UpdateConfig?: {
      /**
       * Format: int64
       * @description Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism).
       */
      Parallelism?: number;
      /**
       * Format: int64
       * @description Amount of time between updates, in nanoseconds.
       */
      Delay?: number;
      /**
       * @description Action to take if an updated task fails to run, or stops running during the update.
       * @enum {string}
       */
      FailureAction?: "continue" | "pause" | "rollback";
      /**
       * Format: int64
       * @description Amount of time to monitor each updated task for failures, in nanoseconds.
       */
      Monitor?: number;
      /**
       * @description The fraction of tasks that may fail during an update before the failure action is invoked, specified as a floating point number between 0 and 1.
       * @default 0
       */
      MaxFailureRatio?: number;
    };
    /** @description Specification for the rollback strategy of the service. */
    RollbackConfig?: {
      /**
       * Format: int64
       * @description Maximum number of tasks to be rolled back in one iteration (0 means unlimited parallelism).
       */
      Parallelism?: number;
      /**
       * Format: int64
       * @description Amount of time between rollback iterations, in nanoseconds.
       */
      Delay?: number;
      /**
       * @description Action to take if an rolled back task fails to run, or stops running during the rollback.
       * @enum {string}
       */
      FailureAction?: "continue" | "pause";
      /**
       * Format: int64
       * @description Amount of time to monitor each rolled back task for failures, in nanoseconds.
       */
      Monitor?: number;
      /**
       * @description The fraction of tasks that may fail during a rollback before the failure action is invoked, specified as a floating point number between 0 and 1.
       * @default 0
       */
      MaxFailureRatio?: number;
    };
    /** @description Array of network names or IDs to attach the service to. */
    Networks?: {
      Target?: string;
      Aliases?: string[];
    }[];
    EndpointSpec?: definitions["EndpointSpec"];
  };
  EndpointPortConfig: {
    Name?: string;
    /** @enum {string} */
    Protocol?: "tcp" | "udp";
    /** @description The port inside the container. */
    TargetPort?: number;
    /** @description The port on the swarm hosts. */
    PublishedPort?: number;
  };
  /** @description Properties that can be configured to access and load balance a service. */
  EndpointSpec: {
    /**
     * @description The mode of resolution to use for internal load balancing between tasks.
     * @default vip
     * @enum {string}
     */
    Mode?: "vip" | "dnsrr";
    /** @description List of exposed ports that this service is accessible on from the outside. Ports can only be provided if `vip` resolution mode is used. */
    Ports?: definitions["EndpointPortConfig"][];
  };
  /**
   * @example {
   *   "ID": "9mnpnzenvg8p8tdbtq4wvbkcz",
   *   "Version": {
   *     "Index": 19
   *   },
   *   "CreatedAt": "2016-06-07T21:05:51.880065305Z",
   *   "UpdatedAt": "2016-06-07T21:07:29.962229872Z",
   *   "Spec": {
   *     "Name": "hopeful_cori",
   *     "TaskTemplate": {
   *       "ContainerSpec": {
   *         "Image": "redis"
   *       },
   *       "Resources": {
   *         "Limits": {},
   *         "Reservations": {}
   *       },
   *       "RestartPolicy": {
   *         "Condition": "any",
   *         "MaxAttempts": 0
   *       },
   *       "Placement": {},
   *       "ForceUpdate": 0
   *     },
   *     "Mode": {
   *       "Replicated": {
   *         "Replicas": 1
   *       }
   *     },
   *     "UpdateConfig": {
   *       "Parallelism": 1,
   *       "Delay": 1000000000,
   *       "FailureAction": "pause",
   *       "Monitor": 15000000000,
   *       "MaxFailureRatio": 0.15
   *     },
   *     "RollbackConfig": {
   *       "Parallelism": 1,
   *       "Delay": 1000000000,
   *       "FailureAction": "pause",
   *       "Monitor": 15000000000,
   *       "MaxFailureRatio": 0.15
   *     },
   *     "EndpointSpec": {
   *       "Mode": "vip",
   *       "Ports": [
   *         {
   *           "Protocol": "tcp",
   *           "TargetPort": 6379,
   *           "PublishedPort": 30001
   *         }
   *       ]
   *     }
   *   },
   *   "Endpoint": {
   *     "Spec": {
   *       "Mode": "vip",
   *       "Ports": [
   *         {
   *           "Protocol": "tcp",
   *           "TargetPort": 6379,
   *           "PublishedPort": 30001
   *         }
   *       ]
   *     },
   *     "Ports": [
   *       {
   *         "Protocol": "tcp",
   *         "TargetPort": 6379,
   *         "PublishedPort": 30001
   *       }
   *     ],
   *     "VirtualIPs": [
   *       {
   *         "NetworkID": "4qvuz4ko70xaltuqbt8956gd1",
   *         "Addr": "10.255.0.2/16"
   *       },
   *       {
   *         "NetworkID": "4qvuz4ko70xaltuqbt8956gd1",
   *         "Addr": "10.255.0.3/16"
   *       }
   *     ]
   *   }
   * }
   */
  Service: {
    ID?: string;
    Version?: definitions["ObjectVersion"];
    /** Format: dateTime */
    CreatedAt?: string;
    /** Format: dateTime */
    UpdatedAt?: string;
    Spec?: definitions["ServiceSpec"];
    Endpoint?: {
      Spec?: definitions["EndpointSpec"];
      Ports?: definitions["EndpointPortConfig"][];
      VirtualIPs?: {
        NetworkID?: string;
        Addr?: string;
      }[];
    };
    /** @description The status of a service update. */
    UpdateStatus?: {
      /** @enum {string} */
      State?: "updating" | "paused" | "completed";
      /** Format: dateTime */
      StartedAt?: string;
      /** Format: dateTime */
      CompletedAt?: string;
      Message?: string;
    };
  };
  ImageDeleteResponseItem: {
    /** @description The image ID of an image that was untagged */
    Untagged?: string;
    /** @description The image ID of an image that was deleted */
    Deleted?: string;
  };
  /**
   * @example {
   *   "Warning": "unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest not found"
   * }
   */
  ServiceUpdateResponse: {
    /** @description Optional warning messages */
    Warnings?: string[];
  };
  ContainerSummary: {
    /** @description The ID of this container */
    Id?: string;
    /** @description The names that this container has been given */
    Names?: string[];
    /** @description The name of the image used when creating this container */
    Image?: string;
    /** @description The ID of the image that this container was created from */
    ImageID?: string;
    /** @description Command to run when starting the container */
    Command?: string;
    /**
     * Format: int64
     * @description When the container was created
     */
    Created?: number;
    /** @description The ports exposed by this container */
    Ports?: definitions["Port"][];
    /**
     * Format: int64
     * @description The size of files that have been created or changed by this container
     */
    SizeRw?: number;
    /**
     * Format: int64
     * @description The total size of all the files in this container
     */
    SizeRootFs?: number;
    /** @description User-defined key/value metadata. */
    Labels?: { [key: string]: string };
    /** @description The state of this container (e.g. `Exited`) */
    State?: string;
    /** @description Additional human-readable status of this container (e.g. `Exit 0`) */
    Status?: string;
    HostConfig?: {
      NetworkMode?: string;
    };
    /** @description A summary of the container's network settings */
    NetworkSettings?: {
      Networks?: { [key: string]: definitions["EndpointSettings"] };
    };
    Mounts?: definitions["MountPoint"][];
  }[];
  SecretSpec: {
    /** @description User-defined name of the secret. */
    Name?: string;
    /** @description User-defined key/value metadata. */
    Labels?: { [key: string]: string };
    /** @description Base64-url-safe-encoded secret data */
    Data?: string[];
  };
  Secret: {
    ID?: string;
    Version?: definitions["ObjectVersion"];
    /** Format: dateTime */
    CreatedAt?: string;
    /** Format: dateTime */
    UpdatedAt?: string;
    Spec?: definitions["ServiceSpec"];
  };
}

export interface operations {
  ContainerList: {
    parameters: {
      query: {
        /** Return all containers. By default, only running containers are shown */
        all?: boolean;
        /** Return this number of most recently created containers, including non-running ones. */
        limit?: number;
        /** Return the size of container as fields `SizeRw` and `SizeRootFs`. */
        size?: boolean;
        /**
         * Filters to process on the container list, encoded as JSON (a `map[string][]string`). For example, `{"status": ["paused"]}` will only return paused containers. Available filters:
         *
         * - `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)
         * - `before`=(`<container id>` or `<container name>`)
         * - `expose`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
         * - `exited=<int>` containers with exit code of `<int>`
         * - `health`=(`starting`|`healthy`|`unhealthy`|`none`)
         * - `id=<ID>` a container's ID
         * - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)
         * - `is-task=`(`true`|`false`)
         * - `label=key` or `label="key=value"` of a container label
         * - `name=<name>` a container's name
         * - `network`=(`<network id>` or `<network name>`)
         * - `publish`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
         * - `since`=(`<container id>` or `<container name>`)
         * - `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)
         * - `volume`=(`<volume name>` or `<mount point destination>`)
         */
        filters?: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: definitions["ContainerSummary"];
      };
      /** bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ContainerCreate: {
    parameters: {
      query: {
        /** Assign the specified name to the container. Must match `/?[a-zA-Z0-9_-]+`. */
        name?: string;
      };
      body: {
        /** Container to create */
        body: definitions["Config"] & {
          HostConfig?: definitions["HostConfig"];
          /** @description This container's networking configuration. */
          NetworkingConfig?: {
            /** @description A mapping of network name to endpoint configuration for that network. */
            EndpointsConfig?: {
              [key: string]: definitions["EndpointSettings"];
            };
          };
        };
      };
    };
    responses: {
      /** Container created successfully */
      201: {
        schema: {
          /** @description The ID of the created container */
          Id: string;
          /** @description Warnings encountered when creating the container */
          Warnings: string[];
        };
      };
      /** bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** no such image */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** impossible to attach */
      406: {
        schema: definitions["ErrorResponse"];
      };
      /** conflict */
      409: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Return low-level information about a container. */
  ContainerInspect: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Return the size of container as fields `SizeRw` and `SizeRootFs` */
        size?: boolean;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: {
          /** @description The ID of the container */
          Id?: string;
          /** @description The time the container was created */
          Created?: string;
          /** @description The path to the command being run */
          Path?: string;
          /** @description The arguments to the command being run */
          Args?: string[];
          /** @description The state of the container. */
          State?: {
            /** @description The status of the container. For example, `running` or `exited`. */
            Status?: string;
            /** @description Whether this container is running. */
            Running?: boolean;
            /** @description Whether this container is paused. */
            Paused?: boolean;
            /** @description Whether this container is restarting. */
            Restarting?: boolean;
            /** @description Whether this container has been killed because it ran out of memory. */
            OOMKilled?: boolean;
            Dead?: boolean;
            /** @description The process ID of this container */
            Pid?: number;
            /** @description The last exit code of this container */
            ExitCode?: number;
            Error?: string;
            /** @description The time when this container was last started. */
            StartedAt?: string;
            /** @description The time when this container last exited. */
            FinishedAt?: string;
          };
          /** @description The container's image */
          Image?: string;
          ResolvConfPath?: string;
          HostnamePath?: string;
          HostsPath?: string;
          LogPath?: string;
          /** @description TODO */
          Node?: { [key: string]: unknown };
          Name?: string;
          RestartCount?: number;
          Driver?: string;
          MountLabel?: string;
          ProcessLabel?: string;
          AppArmorProfile?: string;
          ExecIDs?: string;
          HostConfig?: definitions["HostConfig"];
          GraphDriver?: definitions["GraphDriverData"];
          /**
           * Format: int64
           * @description The size of files that have been created or changed by this container.
           */
          SizeRw?: number;
          /**
           * Format: int64
           * @description The total size of all the files in this container.
           */
          SizeRootFs?: number;
          Mounts?: definitions["MountPoint"][];
          Config?: definitions["Config"];
          NetworkSettings?: definitions["NetworkConfig"];
        };
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. */
  ContainerTop: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** The arguments to pass to `ps`. For example, `aux` */
        ps_args?: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: {
          /** @description The ps column titles */
          Titles?: string[];
          /** @description Each process running in the container, where each is process is an array of values corresponding to the titles */
          Processes?: string[][];
        };
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * Get `stdout` and `stderr` logs from a container.
   *
   * Note: This endpoint works only for containers with the `json-file` or `journald` logging driver.
   */
  ContainerLogs: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /**
         * Return the logs as a stream.
         *
         * This will return a `101` HTTP response with a `Connection: upgrade` header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).
         */
        follow?: boolean;
        /** Return logs from `stdout` */
        stdout?: boolean;
        /** Return logs from `stderr` */
        stderr?: boolean;
        /** Only return logs since this time, as a UNIX timestamp */
        since?: number;
        /** Add timestamps to every log line */
        timestamps?: boolean;
        /** Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines. */
        tail?: string;
      };
    };
    responses: {
      /** logs returned as a stream */
      101: {
        schema: string;
      };
      /** logs returned as a string in response body */
      200: {
        schema: string;
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * Returns which files in a container's filesystem have been added, deleted,
   * or modified. The `Kind` of modification can be one of:
   *
   * - `0`: Modified
   * - `1`: Added
   * - `2`: Deleted
   */
  ContainerChanges: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
    };
    responses: {
      /** The list of changes */
      200: {
        schema: {
          /** @description Path to file that has changed */
          Path: string;
          /**
           * Format: uint8
           * @description Kind of change
           * @enum {integer}
           */
          Kind: 0 | 1 | 2;
        }[];
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Export the contents of a container as a tarball. */
  ContainerExport: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * This endpoint returns a live stream of a container’s resource usage
   * statistics.
   *
   * The `precpu_stats` is the CPU statistic of last read, which is used
   * for calculating the CPU usage percentage. It is not the same as the
   * `cpu_stats` field.
   *
   * If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is
   * nil then for compatibility with older daemons the length of the
   * corresponding `cpu_usage.percpu_usage` array should be used.
   */
  ContainerStats: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Stream the output. If false, the stats will be output once and then it will disconnect. */
        stream?: boolean;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: { [key: string]: unknown };
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Resize the TTY for a container. You must restart the container for the resize to take effect. */
  ContainerResize: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Height of the tty session in characters */
        h?: number;
        /** Width of the tty session in characters */
        w?: number;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** cannot resize container */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ContainerStart: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`. */
        detachKeys?: string;
      };
    };
    responses: {
      /** no error */
      204: never;
      /** container already started */
      304: {
        schema: definitions["ErrorResponse"];
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ContainerStop: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Number of seconds to wait before killing the container */
        t?: number;
      };
    };
    responses: {
      /** no error */
      204: never;
      /** container already stopped */
      304: {
        schema: definitions["ErrorResponse"];
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ContainerRestart: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Number of seconds to wait before killing the container */
        t?: number;
      };
    };
    responses: {
      /** no error */
      204: never;
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Send a POSIX signal to a container, defaulting to killing to the container. */
  ContainerKill: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Signal to send to the container as an integer or string (e.g. `SIGINT`) */
        signal?: string;
      };
    };
    responses: {
      /** no error */
      204: never;
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Change various configuration options of a container without having to recreate it. */
  ContainerUpdate: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      body: {
        update: definitions["Resources"] & {
          RestartPolicy?: definitions["RestartPolicy"];
        };
      };
    };
    responses: {
      /** The container has been updated. */
      200: {
        schema: {
          Warnings?: string[];
        };
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ContainerRename: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** New name for the container */
        name: string;
      };
    };
    responses: {
      /** no error */
      204: never;
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** name already in use */
      409: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * Use the cgroups freezer to suspend all processes in a container.
   *
   * Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the cgroups freezer the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed.
   */
  ContainerPause: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
    };
    responses: {
      /** no error */
      204: never;
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Resume a container which has been paused. */
  ContainerUnpause: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
    };
    responses: {
      /** no error */
      204: never;
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.
   *
   * Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.
   *
   * See [the documentation for the `docker attach` command](/engine/reference/commandline/attach/) for more details.
   *
   * ### Hijacking
   *
   * This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.
   *
   * This is the response from the daemon for an attach request:
   *
   * ```
   * HTTP/1.1 200 OK
   * Content-Type: application/vnd.docker.raw-stream
   *
   * [STREAM]
   * ```
   *
   * After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.
   *
   * To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.
   *
   * For example, the client sends this request to upgrade the connection:
   *
   * ```
   * POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
   * Upgrade: tcp
   * Connection: Upgrade
   * ```
   *
   * The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:
   *
   * ```
   * HTTP/1.1 101 UPGRADED
   * Content-Type: application/vnd.docker.raw-stream
   * Connection: Upgrade
   * Upgrade: tcp
   *
   * [STREAM]
   * ```
   *
   * ### Stream format
   *
   * When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.
   *
   * The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).
   *
   * It is encoded on the first eight bytes like this:
   *
   * ```go
   * header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
   * ```
   *
   * `STREAM_TYPE` can be:
   *
   * - 0: `stdin` (is written on `stdout`)
   * - 1: `stdout`
   * - 2: `stderr`
   *
   * `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.
   *
   * Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.
   *
   * The simplest way to implement this protocol is the following:
   *
   * 1. Read 8 bytes.
   * 2. Choose `stdout` or `stderr` depending on the first byte.
   * 3. Extract the frame size from the last four bytes.
   * 4. Read the extracted size and output it on the correct output.
   * 5. Goto 1.
   *
   * ### Stream format when using a TTY
   *
   * When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client's `stdin`.
   */
  ContainerAttach: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Override the key sequence for detaching a container.Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`. */
        detachKeys?: string;
        /**
         * Replay previous logs from the container.
         *
         * This is useful for attaching to a container that has started and you want to output everything since the container started.
         *
         * If `stream` is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output.
         */
        logs?: boolean;
        /** Stream attached streams from the time the request was made onwards */
        stream?: boolean;
        /** Attach to `stdin` */
        stdin?: boolean;
        /** Attach to `stdout` */
        stdout?: boolean;
        /** Attach to `stderr` */
        stderr?: boolean;
      };
    };
    responses: {
      /** no error, hints proxy about hijacking */
      101: unknown;
      /** no error, no upgrade header found */
      200: unknown;
      /** bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ContainerAttachWebsocket: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Override the key sequence for detaching a container.Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,`, or `_`. */
        detachKeys?: string;
        /** Return logs */
        logs?: boolean;
        /** Return stream */
        stream?: boolean;
      };
    };
    responses: {
      /** no error, hints proxy about hijacking */
      101: unknown;
      /** no error, no upgrade header found */
      200: unknown;
      /** bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Block until a container stops, then returns the exit code. */
  ContainerWait: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
    };
    responses: {
      /** The container has exit. */
      200: {
        schema: {
          /** @description Exit code of the container */
          StatusCode: number;
        };
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ContainerDelete: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Remove anonymous volumes associated with the container. */
        v?: boolean;
        /** If the container is running, kill it before removing it. */
        force?: boolean;
        /** Remove the specified link associated with the container. */
        link?: boolean;
      };
    };
    responses: {
      /** no error */
      204: never;
      /** bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** conflict */
      409: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Get a tar archive of a resource in the filesystem of container id. */
  ContainerArchive: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Resource in the container’s filesystem to archive. */
        path: string;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** Bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** Container or path does not exist */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * Upload a tar archive to be extracted to a path in the filesystem of container id.
   * `path` parameter is asserted to be a directory. If it exists as a file, 400 error
   * will be returned with message "not a directory".
   */
  PutContainerArchive: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Path to a directory in the container to extract the archive’s contents into. */
        path: string;
        /** If “1”, “true”, or “True” then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. */
        noOverwriteDirNonDir?: string;
      };
      body: {
        /** The input stream must be a tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz. */
        inputStream: string;
      };
    };
    responses: {
      /** The content was extracted successfully */
      200: unknown;
      /** Bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** Permission denied, the volume or container rootfs is marked as read-only. */
      403: {
        schema: definitions["ErrorResponse"];
      };
      /** No such container or path does not exist inside the container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** A response header `X-Docker-Container-Path-Stat` is return containing a base64 - encoded JSON object with some filesystem header information about the path. */
  ContainerArchiveInfo: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Resource in the container’s filesystem to archive. */
        path: string;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** Bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** Container or path does not exist */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ContainerPrune: {
    parameters: {
      query: {
        /**
         * Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
         *
         * Available filters:
         * - `until=<timestamp>` Prune containers created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
         */
        filters?: string;
      };
    };
    responses: {
      /** No error */
      200: {
        schema: {
          /** @description Container IDs that were deleted */
          ContainersDeleted?: string[];
          /**
           * Format: int64
           * @description Disk space reclaimed in bytes
           */
          SpaceReclaimed?: number;
        };
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image. */
  ImageList: {
    parameters: {
      query: {
        /** Show all images. Only images from a final layer (no children) are shown by default. */
        all?: boolean;
        /**
         * A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
         *
         * - `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
         * - `dangling=true`
         * - `label=key` or `label="key=value"` of an image label
         * - `reference`=(`<image-name>[:<tag>]`)
         * - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
         */
        filters?: string;
        /** Show digest information as a `RepoDigests` field on each image. */
        digests?: boolean;
      };
    };
    responses: {
      /** Summary image data for the images matching the query */
      200: {
        schema: definitions["ImageSummary"][];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * Build an image from a tar archive with a `Dockerfile` in it.
   *
   * The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](/engine/reference/builder/).
   *
   * The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.
   *
   * The build is canceled if the client drops the connection by quitting or being killed.
   */
  ImageBuild: {
    parameters: {
      body: {
        /** A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz. */
        inputStream?: string;
      };
      query: {
        /** Path within the build context to the `Dockerfile`. This is ignored if `remote` is specified and points to an external `Dockerfile`. */
        dockerfile?: string;
        /** A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag the default `latest` value is assumed. You can provide several `t` parameters. */
        t?: string;
        /** Extra hosts to add to /etc/hosts */
        extrahosts?: string;
        /** A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called `Dockerfile` and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the `dockerfile` parameter is also specified, there must be a file with the corresponding path inside the tarball. */
        remote?: string;
        /** Suppress verbose build output. */
        q?: boolean;
        /** Do not use the cache when building the image. */
        nocache?: boolean;
        /** JSON array of images used for build cache resolution. */
        cachefrom?: string;
        /** Attempt to pull the image even if an older image exists locally. */
        pull?: string;
        /** Remove intermediate containers after a successful build. */
        rm?: boolean;
        /** Always remove intermediate containers, even upon failure. */
        forcerm?: boolean;
        /** Set memory limit for build. */
        memory?: number;
        /** Total memory (memory + swap). Set as `-1` to disable swap. */
        memswap?: number;
        /** CPU shares (relative weight). */
        cpushares?: number;
        /** CPUs in which to allow execution (e.g., `0-3`, `0,1`). */
        cpusetcpus?: string;
        /** The length of a CPU period in microseconds. */
        cpuperiod?: number;
        /** Microseconds of CPU time that the container can get in a CPU period. */
        cpuquota?: number;
        /** JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the `Dockerfile` RUN instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for passing secret values. [Read more about the buildargs instruction.](/engine/reference/builder/#arg) */
        buildargs?: number;
        /** Size of `/dev/shm` in bytes. The size must be greater than 0. If omitted the system uses 64MB. */
        shmsize?: number;
        /** Squash the resulting images layers into a single layer. *(Experimental release only.)* */
        squash?: boolean;
        /** Arbitrary key/value labels to set on the image, as a JSON map of string pairs. */
        labels?: string;
        /** Sets the networking mode for the run commands during build. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to. */
        networkmode?: string;
      };
      header: {
        "Content-type"?: "application/x-tar";
        /**
         * This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.
         *
         * The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:
         *
         * ```
         * {
         *   "docker.example.com": {
         *     "username": "janedoe",
         *     "password": "hunter2"
         *   },
         *   "https://index.docker.io/v1/": {
         *     "username": "mobydock",
         *     "password": "conta1n3rize14"
         *   }
         * }
         * ```
         *
         * Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.
         */
        "X-Registry-Config"?: string;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** Bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Create an image by either pulling it from a registry or importing it. */
  ImageCreate: {
    parameters: {
      query: {
        /** Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed. */
        fromImage?: string;
        /** Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image. */
        fromSrc?: string;
        /** Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image. */
        repo?: string;
        /** Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled. */
        tag?: string;
      };
      body: {
        /** Image content if the value `-` has been specified in fromSrc query parameter */
        inputImage?: string;
      };
      header: {
        /** A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication) */
        "X-Registry-Auth"?: string;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** repository does not exist or no read access */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Return low-level information about an image. */
  ImageInspect: {
    parameters: {
      path: {
        /** Image name or id */
        name: string;
      };
    };
    responses: {
      /** No error */
      200: {
        schema: definitions["Image"];
      };
      /** No such image */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Return parent layers of an image. */
  ImageHistory: {
    parameters: {
      path: {
        /** Image name or ID */
        name: string;
      };
    };
    responses: {
      /** List of image layers */
      200: {
        schema: {
          Id: string;
          /** Format: int64 */
          Created: number;
          CreatedBy: string;
          Tags: string[];
          /** Format: int64 */
          Size: number;
          Comment: string;
        }[];
      };
      /** No such image */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * Push an image to a registry.
   *
   * If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.
   *
   * The push is cancelled if the HTTP connection is closed.
   */
  ImagePush: {
    parameters: {
      path: {
        /** Image name or ID. */
        name: string;
      };
      query: {
        /** The tag to associate with the image on the registry. */
        tag?: string;
      };
      header: {
        /** A base64-encoded auth configuration. [See the authentication section for details.](#section/Authentication) */
        "X-Registry-Auth": string;
      };
    };
    responses: {
      /** No error */
      200: unknown;
      /** No such image */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Tag an image so that it becomes part of a repository. */
  ImageTag: {
    parameters: {
      path: {
        /** Image name or ID to tag. */
        name: string;
      };
      query: {
        /** The repository to tag in. For example, `someuser/someimage`. */
        repo?: string;
        /** The name of the new tag. */
        tag?: string;
      };
    };
    responses: {
      /** No error */
      201: unknown;
      /** Bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** No such image */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Conflict */
      409: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * Remove an image, along with any untagged parent images that were
   * referenced by that image.
   *
   * Images can't be removed if they have descendant images, are being
   * used by a running container or are being used by a build.
   */
  ImageDelete: {
    parameters: {
      path: {
        /** Image name or ID */
        name: string;
      };
      query: {
        /** Remove the image even if it is being used by stopped containers or has other tags */
        force?: boolean;
        /** Do not delete untagged parent images */
        noprune?: boolean;
      };
    };
    responses: {
      /** The image was deleted successfully */
      200: {
        schema: definitions["ImageDeleteResponseItem"][];
      };
      /** No such image */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Conflict */
      409: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Search for an image on Docker Hub. */
  ImageSearch: {
    parameters: {
      query: {
        /** Term to search */
        term: string;
        /** Maximum number of results to return */
        limit?: number;
        /**
         * A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
         *
         * - `is-automated=(true|false)`
         * - `is-official=(true|false)`
         * - `stars=<number>` Matches images that has at least 'number' stars.
         */
        filters?: string;
      };
    };
    responses: {
      /** No error */
      200: {
        schema: {
          description?: string;
          is_official?: boolean;
          is_automated?: boolean;
          name?: string;
          star_count?: number;
        }[];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ImagePrune: {
    parameters: {
      query: {
        /**
         * Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:
         *
         * - `dangling=<boolean>` When set to `true` (or `1`), prune only
         *    unused *and* untagged images. When set to `false`
         *    (or `0`), all unused images are pruned.
         * - `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
         */
        filters?: string;
      };
    };
    responses: {
      /** No error */
      200: {
        schema: {
          /** @description Images that were deleted */
          ImagesDeleted?: definitions["ImageDeleteResponseItem"][];
          /**
           * Format: int64
           * @description Disk space reclaimed in bytes
           */
          SpaceReclaimed?: number;
        };
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Validate credentials for a registry and, if available, get an identity token for accessing the registry without password. */
  SystemAuth: {
    parameters: {
      body: {
        /** Authentication to check */
        authConfig?: definitions["AuthConfig"];
      };
    };
    responses: {
      /** An identity token was generated successfully. */
      200: {
        schema: {
          /** @description The status of the authentication */
          Status: string;
          /** @description An opaque token used to authenticate a user after a successful login */
          IdentityToken?: string;
        };
      };
      /** No error */
      204: never;
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SystemInfo: {
    responses: {
      /** No error */
      200: {
        schema: {
          Architecture?: string;
          Containers?: number;
          ContainersRunning?: number;
          ContainersStopped?: number;
          ContainersPaused?: number;
          CpuCfsPeriod?: boolean;
          CpuCfsQuota?: boolean;
          Debug?: boolean;
          DiscoveryBackend?: string;
          DockerRootDir?: string;
          Driver?: string;
          DriverStatus?: string[][];
          SystemStatus?: string[][];
          Plugins?: {
            Volume?: string[];
            Network?: string[];
          };
          ExperimentalBuild?: boolean;
          HttpProxy?: string;
          HttpsProxy?: string;
          ID?: string;
          IPv4Forwarding?: boolean;
          Images?: number;
          IndexServerAddress?: string;
          InitPath?: string;
          InitSha1?: string;
          KernelVersion?: string;
          Labels?: string[];
          MemTotal?: number;
          MemoryLimit?: boolean;
          NCPU?: number;
          NEventsListener?: number;
          NFd?: number;
          NGoroutines?: number;
          Name?: string;
          NoProxy?: string;
          OomKillDisable?: boolean;
          OSType?: string;
          OomScoreAdj?: number;
          OperatingSystem?: string;
          RegistryConfig?: {
            IndexConfigs?: {
              [key: string]: {
                Mirrors?: string[];
                Name?: string;
                Official?: boolean;
                Secure?: boolean;
              };
            };
            InsecureRegistryCIDRs?: string[];
          };
          SwapLimit?: boolean;
          SystemTime?: string;
          ServerVersion?: string;
        };
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Returns the version of Docker that is running and various information about the system that Docker is running on. */
  SystemVersion: {
    responses: {
      /** no error */
      200: {
        schema: {
          Version?: string;
          ApiVersion?: string;
          MinAPIVersion?: string;
          GitCommit?: string;
          GoVersion?: string;
          Os?: string;
          Arch?: string;
          KernelVersion?: string;
          Experimental?: boolean;
          BuildTime?: string;
        };
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** This is a dummy endpoint you can use to test if the server is accessible. */
  SystemPing: {
    responses: {
      /** no error */
      200: {
        headers: {};
        schema: string;
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ImageCommit: {
    parameters: {
      body: {
        /** The container configuration */
        containerConfig?: definitions["Config"];
      };
      query: {
        /** The ID or name of the container to commit */
        container?: string;
        /** Repository name for the created image */
        repo?: string;
        /** Tag name for the create image */
        tag?: string;
        /** Commit message */
        comment?: string;
        /** Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`) */
        author?: string;
        /** Whether to pause the container before committing */
        pause?: boolean;
        /** `Dockerfile` instructions to apply while committing */
        changes?: string;
      };
    };
    responses: {
      /** no error */
      201: {
        schema: definitions["IdResponse"];
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * Stream real-time events from the server.
   *
   * Various objects within Docker report events when something happens to them.
   *
   * Containers report these events: `attach, commit, copy, create, destroy, detach, die, exec_create, exec_detach, exec_start, export, health_status, kill, oom, pause, rename, resize, restart, start, stop, top, unpause, update`
   *
   * Images report these events: `delete, import, load, pull, push, save, tag, untag`
   *
   * Volumes report these events: `create, mount, unmount, destroy`
   *
   * Networks report these events: `create, connect, disconnect, destroy`
   *
   * The Docker daemon reports these events: `reload`
   */
  SystemEvents: {
    parameters: {
      query: {
        /** Show events created since this timestamp then stream new events. */
        since?: string;
        /** Show events created until this timestamp then stop streaming. */
        until?: string;
        /**
         * A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:
         *
         * - `container=<string>` container name or ID
         * - `daemon=<string>` daemon name or ID
         * - `event=<string>` event type
         * - `image=<string>` image name or ID
         * - `label=<string>` image or container label
         * - `network=<string>` network name or ID
         * - `plugin`=<string> plugin name or ID
         * - `type=<string>` object to filter by, one of `container`, `image`, `volume`, `network`, or `daemon`
         * - `volume=<string>` volume name or ID
         */
        filters?: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: {
          /** @description The type of object emitting the event */
          Type?: string;
          /** @description The type of event */
          Action?: string;
          Actor?: {
            /** @description The ID of the object emitting the event */
            ID?: string;
            /** @description Various key/value attributes of the object, depending on its type */
            Attributes?: { [key: string]: string };
          };
          /** @description Timestamp of event */
          time?: number;
          /**
           * Format: int64
           * @description Timestamp of event, with nanosecond accuracy
           */
          timeNano?: number;
        };
      };
      /** bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SystemDataUsage: {
    responses: {
      /** no error */
      200: {
        schema: {
          /** Format: int64 */
          LayersSize?: number;
          Images?: definitions["ImageSummary"][];
          Containers?: definitions["ContainerSummary"][];
          Volumes?: definitions["Volume"][];
        };
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * Get a tarball containing all images and metadata for a repository.
   *
   * If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.
   *
   * ### Image tarball format
   *
   * An image tarball contains one directory per image layer (named using its long ID), each containing these files:
   *
   * - `VERSION`: currently `1.0` - the file format version
   * - `json`: detailed layer information, similar to `docker inspect layer_id`
   * - `layer.tar`: A tarfile containing the filesystem changes in this layer
   *
   * The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.
   *
   * If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.
   *
   * ```json
   * {
   *   "hello-world": {
   *     "latest": "565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1"
   *   }
   * }
   * ```
   */
  ImageGet: {
    parameters: {
      path: {
        /** Image name or ID */
        name: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: string;
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * Get a tarball containing all images and metadata for several image repositories.
   *
   * For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.
   *
   * For details on the format, see [the export image endpoint](#operation/ImageGet).
   */
  ImageGetAll: {
    parameters: {
      query: {
        /** Image names to filter by */
        names?: string[];
      };
    };
    responses: {
      /** no error */
      200: {
        schema: string;
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * Load a set of images and tags into a repository.
   *
   * For details on the format, see [the export image endpoint](#operation/ImageGet).
   */
  ImageLoad: {
    parameters: {
      body: {
        /** Tar archive containing images */
        imagesTarball?: string;
      };
      query: {
        /** Suppress progress details during load. */
        quiet?: boolean;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Run a command inside a running container. */
  ContainerExec: {
    parameters: {
      body: {
        /** Exec configuration */
        execConfig: {
          /** @description Attach to `stdin` of the exec command. */
          AttachStdin?: boolean;
          /** @description Attach to `stdout` of the exec command. */
          AttachStdout?: boolean;
          /** @description Attach to `stderr` of the exec command. */
          AttachStderr?: boolean;
          /** @description Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`. */
          DetachKeys?: string;
          /** @description Allocate a pseudo-TTY. */
          Tty?: boolean;
          /** @description A list of environment variables in the form `["VAR=value", ...]`. */
          Env?: string[];
          /** @description Command to run, as a string or array of strings. */
          Cmd?: string[];
          /**
           * @description Runs the exec process with extended privileges.
           * @default false
           */
          Privileged?: boolean;
          /** @description The user, and optionally, group to run the exec process inside the container. Format is one of: `user`, `user:group`, `uid`, or `uid:gid`. */
          User?: string;
        };
      };
      path: {
        /** ID or name of container */
        id: string;
      };
    };
    responses: {
      /** no error */
      201: {
        schema: definitions["IdResponse"];
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** container is paused */
      409: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. */
  ExecStart: {
    parameters: {
      body: {
        execStartConfig?: {
          /** @description Detach from the command. */
          Detach?: boolean;
          /** @description Allocate a pseudo-TTY. */
          Tty?: boolean;
        };
      };
      path: {
        /** Exec instance ID */
        id: string;
      };
    };
    responses: {
      /** No error */
      200: unknown;
      /** No such exec instance */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Container is stopped or paused */
      409: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance. */
  ExecResize: {
    parameters: {
      path: {
        /** Exec instance ID */
        id: string;
      };
      query: {
        /** Height of the TTY session in characters */
        h?: number;
        /** Width of the TTY session in characters */
        w?: number;
      };
    };
    responses: {
      /** No error */
      200: unknown;
      /** bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** No such exec instance */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Return low-level information about an exec instance. */
  ExecInspect: {
    parameters: {
      path: {
        /** Exec instance ID */
        id: string;
      };
    };
    responses: {
      /** No error */
      200: {
        schema: {
          ID?: string;
          Running?: boolean;
          ExitCode?: number;
          ProcessConfig?: definitions["ProcessConfig"];
          OpenStdin?: boolean;
          OpenStderr?: boolean;
          OpenStdout?: boolean;
          ContainerID?: string;
          /** @description The system process ID for the exec process. */
          Pid?: number;
        };
      };
      /** No such exec instance */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  VolumeList: {
    parameters: {
      query: {
        /**
         * JSON encoded value of the filters (a `map[string][]string`) to
         * process on the volumes list. Available filters:
         *
         * - `dangling=<boolean>` When set to `true` (or `1`), returns all
         *    volumes that are not in use by a container. When set to `false`
         *    (or `0`), only volumes that are in use by one or more
         *    containers are returned.
         * - `driver=<volume-driver-name>` Matches volumes based on their driver.
         * - `label=<key>` or `label=<key>:<value>` Matches volumes based on
         *    the presence of a `label` alone or a `label` and a value.
         * - `name=<volume-name>` Matches all or part of a volume name.
         */
        filters?: string;
      };
    };
    responses: {
      /** Summary volume data that matches the query */
      200: {
        schema: {
          /** @description List of volumes */
          Volumes: definitions["Volume"][];
          /** @description Warnings that occurred when fetching the list of volumes */
          Warnings: string[];
        };
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  VolumeCreate: {
    parameters: {
      body: {
        /** Volume configuration */
        volumeConfig: {
          /** @description The new volume's name. If not specified, Docker generates a name. */
          Name?: string;
          /**
           * @description Name of the volume driver to use.
           * @default local
           */
          Driver?: string;
          /** @description A mapping of driver options and values. These options are passed directly to the driver and are driver specific. */
          DriverOpts?: { [key: string]: string };
          /** @description User-defined key/value metadata. */
          Labels?: { [key: string]: string };
        };
      };
    };
    responses: {
      /** The volume was created successfully */
      201: {
        schema: definitions["Volume"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  VolumeInspect: {
    parameters: {
      path: {
        /** Volume name or ID */
        name: string;
      };
    };
    responses: {
      /** No error */
      200: {
        schema: definitions["Volume"];
      };
      /** No such volume */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Instruct the driver to remove the volume. */
  VolumeDelete: {
    parameters: {
      path: {
        /** Volume name or ID */
        name: string;
      };
      query: {
        /** Force the removal of the volume */
        force?: boolean;
      };
    };
    responses: {
      /** The volume was removed */
      204: never;
      /** No such volume or volume driver */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Volume is in use and cannot be removed */
      409: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  VolumePrune: {
    parameters: {
      query: {
        /**
         * Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
         *
         * Available filters:
         */
        filters?: string;
      };
    };
    responses: {
      /** No error */
      200: {
        schema: {
          /** @description Volumes that were deleted */
          VolumesDeleted?: string[];
          /**
           * Format: int64
           * @description Disk space reclaimed in bytes
           */
          SpaceReclaimed?: number;
        };
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  NetworkList: {
    parameters: {
      query: {
        /**
         * JSON encoded value of the filters (a `map[string][]string`) to process on the networks list. Available filters:
         *
         * - `driver=<driver-name>` Matches a network's driver.
         * - `id=<network-id>` Matches all or part of a network ID.
         * - `label=<key>` or `label=<key>=<value>` of a network label.
         * - `name=<network-name>` Matches all or part of a network name.
         * - `type=["custom"|"builtin"]` Filters networks by type. The `custom` keyword returns all user-defined networks.
         */
        filters?: string;
      };
    };
    responses: {
      /** No error */
      200: {
        schema: definitions["Network"][];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  NetworkInspect: {
    parameters: {
      path: {
        /** Network ID or name */
        id: string;
      };
      query: {
        /** Detailed inspect output for troubleshooting */
        verbose?: boolean;
      };
    };
    responses: {
      /** No error */
      200: {
        schema: definitions["Network"];
      };
      /** Network not found */
      404: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  NetworkDelete: {
    parameters: {
      path: {
        /** Network ID or name */
        id: string;
      };
    };
    responses: {
      /** No error */
      204: never;
      /** no such network */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  NetworkCreate: {
    parameters: {
      body: {
        /** Network configuration */
        networkConfig: {
          /** @description The network's name. */
          Name: string;
          /** @description Check for networks with duplicate names. Since Network is primarily keyed based on a random ID and not on the name, and network name is strictly a user-friendly alias to the network which is uniquely identified using ID, there is no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best effort checking of any networks which has the same name but it is not guaranteed to catch all name collisions. */
          CheckDuplicate?: boolean;
          /**
           * @description Name of the network driver plugin to use.
           * @default bridge
           */
          Driver?: string;
          /** @description Restrict external access to the network. */
          Internal?: boolean;
          /** @description Globally scoped network is manually attachable by regular containers from workers in swarm mode. */
          Attachable?: boolean;
          /** @description Optional custom IP scheme for the network. */
          IPAM?: definitions["IPAM"];
          /** @description Enable IPv6 on the network. */
          EnableIPv6?: boolean;
          /** @description Network specific options to be used by the drivers. */
          Options?: { [key: string]: string };
          /** @description User-defined key/value metadata. */
          Labels?: { [key: string]: string };
        };
      };
    };
    responses: {
      /** No error */
      201: {
        schema: {
          /** @description The ID of the created network. */
          Id?: string;
          Warning?: string;
        };
      };
      /** operation not supported for pre-defined networks */
      403: {
        schema: definitions["ErrorResponse"];
      };
      /** plugin not found */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  NetworkConnect: {
    parameters: {
      path: {
        /** Network ID or name */
        id: string;
      };
      body: {
        container: {
          /** @description The ID or name of the container to connect to the network. */
          Container?: string;
          EndpointConfig?: definitions["EndpointSettings"];
        };
      };
    };
    responses: {
      /** No error */
      200: unknown;
      /** Operation not supported for swarm scoped networks */
      403: {
        schema: definitions["ErrorResponse"];
      };
      /** Network or container not found */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  NetworkDisconnect: {
    parameters: {
      path: {
        /** Network ID or name */
        id: string;
      };
      body: {
        container: {
          /** @description The ID or name of the container to disconnect from the network. */
          Container?: string;
          /** @description Force the container to disconnect from the network. */
          Force?: boolean;
        };
      };
    };
    responses: {
      /** No error */
      200: unknown;
      /** Operation not supported for swarm scoped networks */
      403: {
        schema: definitions["ErrorResponse"];
      };
      /** Network or container not found */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  NetworkPrune: {
    parameters: {
      query: {
        /**
         * Filters to process on the prune list, encoded as JSON (a `map[string][]string`).
         *
         * Available filters:
         * - `until=<timestamp>` Prune networks created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
         */
        filters?: string;
      };
    };
    responses: {
      /** No error */
      200: {
        schema: {
          /** @description Networks that were deleted */
          NetworksDeleted?: string[];
        };
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Returns information about installed plugins. */
  PluginList: {
    parameters: {
      query: {
        /**
         * A JSON encoded value of the filters (a `map[string][]string`) to process on the plugin list. Available filters:
         *
         * - `capability=<capability name>`
         * - `enable=<true>|<false>`
         */
        filters?: string;
      };
    };
    responses: {
      /** No error */
      200: {
        schema: definitions["Plugin"][];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  GetPluginPrivileges: {
    parameters: {
      query: {
        /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
        remote: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: {
          Name?: string;
          Description?: string;
          Value?: string[];
        }[];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable). */
  PluginPull: {
    parameters: {
      query: {
        /**
         * Remote reference for plugin to install.
         *
         * The `:latest` tag is optional, and is used as the default if omitted.
         */
        remote: string;
        /**
         * Local name for the pulled plugin.
         *
         * The `:latest` tag is optional, and is used as the default if omitted.
         */
        name?: string;
      };
      header: {
        /** A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication) */
        "X-Registry-Auth"?: string;
      };
      body: {
        body?: {
          Name?: string;
          Description?: string;
          Value?: string[];
        }[];
      };
    };
    responses: {
      /** no error */
      204: never;
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  PluginInspect: {
    parameters: {
      path: {
        /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
        name: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: definitions["Plugin"];
      };
      /** plugin is not installed */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  PluginDelete: {
    parameters: {
      path: {
        /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
        name: string;
      };
      query: {
        /** Disable the plugin before removing. This may result in issues if the plugin is in use by a container. */
        force?: boolean;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: definitions["Plugin"];
      };
      /** plugin is not installed */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  PluginEnable: {
    parameters: {
      path: {
        /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
        name: string;
      };
      query: {
        /** Set the HTTP client timeout (in seconds) */
        timeout?: number;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** plugin is not installed */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  PluginDisable: {
    parameters: {
      path: {
        /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
        name: string;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** plugin is not installed */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  PluginUpgrade: {
    parameters: {
      path: {
        /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
        name: string;
      };
      query: {
        /**
         * Remote reference to upgrade to.
         *
         * The `:latest` tag is optional, and is used as the default if omitted.
         */
        remote: string;
      };
      header: {
        /** A base64-encoded auth configuration to use when pulling a plugin from a registry. [See the authentication section for details.](#section/Authentication) */
        "X-Registry-Auth"?: string;
      };
      body: {
        body?: {
          Name?: string;
          Description?: string;
          Value?: string[];
        }[];
      };
    };
    responses: {
      /** no error */
      204: never;
      /** plugin not installed */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  PluginCreate: {
    parameters: {
      query: {
        /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
        name: string;
      };
      body: {
        /** Path to tar containing plugin rootfs and manifest */
        tarContext?: string;
      };
    };
    responses: {
      /** no error */
      204: never;
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /** Push a plugin to the registry. */
  PluginPush: {
    parameters: {
      path: {
        /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
        name: string;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** plugin not installed */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  PluginSet: {
    parameters: {
      path: {
        /** The name of the plugin. The `:latest` tag is optional, and is the default if omitted. */
        name: string;
      };
      body: {
        body?: string[];
      };
    };
    responses: {
      /** No error */
      204: never;
      /** Plugin not installed */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** Server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  NodeList: {
    parameters: {
      query: {
        /**
         * Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).
         *
         * Available filters:
         * - `id=<node id>`
         * - `label=<engine label>`
         * - `membership=`(`accepted`|`pending`)`
         * - `name=<node name>`
         * - `role=`(`manager`|`worker`)`
         */
        filters?: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: definitions["Node"][];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  NodeInspect: {
    parameters: {
      path: {
        /** The ID or name of the node */
        id: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: definitions["Node"];
      };
      /** no such node */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  NodeDelete: {
    parameters: {
      path: {
        /** The ID or name of the node */
        id: string;
      };
      query: {
        /** Force remove a node from the swarm */
        force?: boolean;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** no such node */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  NodeUpdate: {
    parameters: {
      path: {
        /** The ID of the node */
        id: string;
      };
      body: {
        body?: definitions["NodeSpec"];
      };
      query: {
        /** The version number of the node object being updated. This is required to avoid conflicting writes. */
        version: number;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** no such node */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SwarmInspect: {
    responses: {
      /** no error */
      200: {
        schema: definitions["ClusterInfo"] & {
          /** @description The tokens workers and managers need to join the swarm. */
          JoinTokens?: {
            /** @description The token workers can use to join the swarm. */
            Worker?: string;
            /** @description The token managers can use to join the swarm. */
            Manager?: string;
          };
        };
      };
      /** no such swarm */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SwarmInit: {
    parameters: {
      body: {
        body: {
          /** @description Listen address used for inter-manager communication, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the default swarm listening port is used. */
          ListenAddr?: string;
          /** @description Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. */
          AdvertiseAddr?: string;
          /** @description Force creation of a new swarm. */
          ForceNewCluster?: boolean;
          Spec?: definitions["SwarmSpec"];
        };
      };
    };
    responses: {
      /** no error */
      200: {
        schema: string;
      };
      /** bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is already part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SwarmJoin: {
    parameters: {
      body: {
        body: {
          /** @description Listen address used for inter-manager communication if the node gets promoted to manager, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). */
          ListenAddr?: string;
          /** @description Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. */
          AdvertiseAddr?: string;
          /** @description Addresses of manager nodes already participating in the swarm. */
          RemoteAddrs?: string;
          /** @description Secret token for joining this swarm. */
          JoinToken?: string;
        };
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is already part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SwarmLeave: {
    parameters: {
      query: {
        /** Force leave swarm, even if this is the last manager or that it will break the cluster. */
        force?: boolean;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SwarmUpdate: {
    parameters: {
      body: {
        body: definitions["SwarmSpec"];
      };
      query: {
        /** The version number of the swarm object being updated. This is required to avoid conflicting writes. */
        version: number;
        /** Rotate the worker join token. */
        rotateWorkerToken?: boolean;
        /** Rotate the manager join token. */
        rotateManagerToken?: boolean;
        /** Rotate the manager unlock key. */
        rotateManagerUnlockKey?: boolean;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SwarmUnlockkey: {
    responses: {
      /** no error */
      200: {
        schema: {
          /** @description The swarm's unlock key. */
          UnlockKey?: string;
        };
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SwarmUnlock: {
    parameters: {
      body: {
        body: {
          /** @description The swarm's unlock key. */
          UnlockKey?: string;
        };
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ServiceList: {
    parameters: {
      query: {
        /**
         * A JSON encoded value of the filters (a `map[string][]string`) to process on the services list. Available filters:
         *
         * - `id=<service id>`
         * - `label=<service label>`
         * - `name=<service name>`
         */
        filters?: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: definitions["Service"][];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ServiceCreate: {
    parameters: {
      body: {
        body: definitions["ServiceSpec"] & { [key: string]: unknown };
      };
      header: {
        /** A base64-encoded auth configuration for pulling from private registries. [See the authentication section for details.](#section/Authentication) */
        "X-Registry-Auth"?: string;
      };
    };
    responses: {
      /** no error */
      201: {
        schema: {
          /** @description The ID of the created service. */
          ID?: string;
          /** @description Optional warning message */
          Warning?: string;
        };
      };
      /** bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** network is not eligible for services */
      403: {
        schema: definitions["ErrorResponse"];
      };
      /** name conflicts with an existing service */
      409: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ServiceInspect: {
    parameters: {
      path: {
        /** ID or name of service. */
        id: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: definitions["Service"];
      };
      /** no such service */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ServiceDelete: {
    parameters: {
      path: {
        /** ID or name of service. */
        id: string;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** no such service */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  ServiceUpdate: {
    parameters: {
      path: {
        /** ID or name of service. */
        id: string;
      };
      body: {
        body: definitions["ServiceSpec"] & { [key: string]: unknown };
      };
      query: {
        /** The version number of the service object being updated. This is required to avoid conflicting writes. */
        version: number;
        /** If the X-Registry-Auth header is not specified, this parameter indicates where to find registry authorization credentials. The valid values are `spec` and `previous-spec`. */
        registryAuthFrom?: string;
        /** Set to this parameter to `previous` to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. */
        rollback?: string;
      };
      header: {
        /** A base64-encoded auth configuration for pulling from private registries. [See the authentication section for details.](#section/Authentication) */
        "X-Registry-Auth"?: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: definitions["ServiceUpdateResponse"];
      };
      /** bad parameter */
      400: {
        schema: definitions["ErrorResponse"];
      };
      /** no such service */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  /**
   * Get `stdout` and `stderr` logs from a service.
   *
   * **Note**: This endpoint works only for services with the `json-file` or `journald` logging drivers.
   */
  ServiceLogs: {
    parameters: {
      path: {
        /** ID or name of the container */
        id: string;
      };
      query: {
        /** Show extra details provided to logs. */
        details?: boolean;
        /**
         * Return the logs as a stream.
         *
         * This will return a `101` HTTP response with a `Connection: upgrade` header, then hijack the HTTP connection to send raw output. For more information about hijacking and the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).
         */
        follow?: boolean;
        /** Return logs from `stdout` */
        stdout?: boolean;
        /** Return logs from `stderr` */
        stderr?: boolean;
        /** Only return logs since this time, as a UNIX timestamp */
        since?: number;
        /** Add timestamps to every log line */
        timestamps?: boolean;
        /** Only return this number of log lines from the end of the logs. Specify as an integer or `all` to output all log lines. */
        tail?: string;
      };
    };
    responses: {
      /** logs returned as a stream */
      101: {
        schema: string;
      };
      /** logs returned as a string in response body */
      200: {
        schema: string;
      };
      /** no such container */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  TaskList: {
    parameters: {
      query: {
        /**
         * A JSON encoded value of the filters (a `map[string][]string`) to process on the tasks list. Available filters:
         *
         * - `desired-state=(running | shutdown | accepted)`
         * - `id=<task id>`
         * - `label=key` or `label="key=value"`
         * - `name=<task name>`
         * - `node=<node id or name>`
         * - `service=<service name>`
         */
        filters?: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: definitions["Task"][];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  TaskInspect: {
    parameters: {
      path: {
        /** ID of the task */
        id: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: definitions["Task"];
      };
      /** no such task */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SecretList: {
    parameters: {
      query: {
        /**
         * A JSON encoded value of the filters (a `map[string][]string`) to process on the secrets list. Available filters:
         *
         * - `names=<secret name>`
         */
        filters?: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: definitions["Secret"][];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SecretCreate: {
    parameters: {
      body: {
        body?: definitions["SecretSpec"] & { [key: string]: unknown };
      };
    };
    responses: {
      /** no error */
      201: {
        schema: {
          /** @description The ID of the created secret. */
          ID?: string;
        };
      };
      /** name conflicts with an existing object */
      409: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SecretInspect: {
    parameters: {
      path: {
        /** ID of the secret */
        id: string;
      };
    };
    responses: {
      /** no error */
      200: {
        schema: definitions["Secret"];
      };
      /** secret not found */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SecretDelete: {
    parameters: {
      path: {
        /** ID of the secret */
        id: string;
      };
    };
    responses: {
      /** no error */
      204: never;
      /** secret not found */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
  SecretUpdate: {
    parameters: {
      path: {
        /** The ID or name of the secret */
        id: string;
      };
      body: {
        /** The spec of the secret to update. Currently, only the Labels field can be updated. All other fields must remain unchanged from the [SecretInspect endpoint](#operation/SecretInspect) response values. */
        body?: definitions["SecretSpec"];
      };
      query: {
        /** The version number of the secret object being updated. This is required to avoid conflicting writes. */
        version: number;
      };
    };
    responses: {
      /** no error */
      200: unknown;
      /** no such secret */
      404: {
        schema: definitions["ErrorResponse"];
      };
      /** server error */
      500: {
        schema: definitions["ErrorResponse"];
      };
      /** node is not part of a swarm */
      503: {
        schema: definitions["ErrorResponse"];
      };
    };
  };
}

export interface external {}
